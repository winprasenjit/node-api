{"version":3,"sources":["toolbar-buttons.js","select2.js","date.js","sb-admin-2.js","select.js","component.js"],"names":["angular","module","directive","$compile","restrict","replace","template","scope","tooltipText","iconClass","fieldVal","submitLabel","clearLabel","submitFunc","clearFunc","link","elem","attrs","childDir","find","attr","on","event","$emit","target","currentTarget","contents","$parent","action","console","log","searchFunc","$rootScope","eventConstants","controller","$scope","exportasCSV","EXPORT_AS_CSV","exportasXLS","EXPORT_AS_XLS","exportasPDF","EXPORT_AS_PDF","fileConfigUrl","fileUploadUrl","isMultipleFile","userId","monthList","yearList","saveFunction","saveAsFunction","uploadasCSV","$broadcast","UPLOAD_AS_CSV","uploadasXLS","UPLOAD_AS_XLS","uploadasDelimited","UPLOAD_AS_DELIMITED","value","uiSelect2Config","$timeout","options","extend","require","priority","compile","tElm","tAttrs","watch","repeatOption","repeatAttr","isSelect","is","isMultiple","isDefined","multiple","length","jQuery","trim","split","pop","elm","opts","$eval","uiSelect2","convertToAngularModel","select2_data","model","simple_tags","forEach","index","push","id","convertToSelect2Model","angular_data","text","initSelection","$watch","ngModel","current","old","$render","select2","$viewValue","viewValue","isString","isObject","newVal","oldVal","equals","trigger","$setPristine","$parsers","div","prev","toggleClass","$valid","$dirty","$pristine","bind","e","stopImmediatePropagation","$$phase","$root","$apply","$setViewValue","element","callback","isPristine","$observe","ngMultiple","$set","$modelValue","constant","uiDateConfig","getOptions","uiDate","initDateWidget","showing","_onSelect","onSelect","noop","picker","datepicker","blur","beforeShow","onClose","$on","focus","date","isDate","Error","uiDateFormatConfig","modelCtrl","dateFormat","uiDateFormat","$formatters","parseDate","formatDate","Date","toISOString","$","metisMenu","window","topOffset","width","this","innerWidth","screen","addClass","removeClass","height","innerHeight","css","url","location","filter","href","indexOf","parent","KEY","TAB","ENTER","ESC","SPACE","LEFT","UP","RIGHT","DOWN","SHIFT","CTRL","ALT","PAGE_UP","PAGE_DOWN","HOME","END","BACKSPACE","DELETE","COMMAND","MAP","91","8","9","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","43","44","45","46","48","49","50","51","52","53","54","55","56","57","59","61","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","96","97","98","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","144","145","186","187","188","189","190","191","192","219","220","221","222","isControl","k","which","metaKey","isFunctionKey","isVerticalMovement","isHorizontalMovement","undefined","prototype","querySelectorAll","selector","closest","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","parentElement","latestId","uis","theme","searchEnabled","sortable","placeholder","refreshDelay","closeOnSelect","generateId","appendToBody","service","minErr","$$minErr","error","apply","arguments","message","RegExp","ctrl","transclude","clone","append","escapeRegexp","queryToEscape","matchItem","query","factory","$document","$window","boundingClientRect","getBoundingClientRect","prop","top","pageYOffset","documentElement","scrollTop","left","pageXOffset","scrollLeft","uiSelectConfig","RepeatParser","uiSelectMinErr","templateUrl","tElement","repeat","$select","transcludeFn","groupByExp","groupBy","parseRepeatAttr","disableChoiceExpression","uiDisableChoice","onHighlightCallback","onHighlight","groups","getGroupNgRepeatExpression","choices","getNgRepeatExpression","parserResult","itemName","trackByExp","rowsInner","newValue","open","activate","activeIndex","tagging","isActivated","refresh","$element","$filter","_resetSearchInput","resetSearchInput","selected","items","_handleDropDownSelection","key","processed","search","select","searchInput","close","_ensureHighlightVisible","container","highlighted","posY","offsetTop","clientHeight","offsetHeight","isGrouped","EMPTY_SEARCH","removeSelected","disabled","focusser","fct","taggingTokens","tokens","lockChoiceExpression","clickTriggeredSelect","isEmpty","isUndefined","initSearchValue","avoidReset","taggingLabel","onblur","onRowblur","findGroupByName","name","group","updateGroups","item","groupFn","groupName","isFunction","concat","setPlainItems","setItemsFn","parse","itemProperty","refreshItems","data","source","selectedItems","isArray","filteredItems","i","$watchCollection","_refreshDelayPromise","refreshAttr","cancel","setActiveItem","isActive","itemScope","itemIndex","isDisabled","_uiSelectChoiceDisabled","skipFocusser","$event","selection","locals","onSelectCallback","$item","$model","modelMapper","type","$setTouched","setFocus","focusInput","clear","stopPropagation","toggle","preventDefault","isLocked","_uiSelectChoiceLocked","sizeWatch","sizeSearchInput","input","calculateContainerWidth","clientWidth","offsetParent","updateIfVisible","containerWidth","inputWidth","offsetLeft","tagged","keyCode","triggerHandler","newItem","originalEvent","clipboardData","getData","off","uisOffset","$parse","controllerAs","removeAttr","ctrls","onDocumentClick","contains","focusableControls","targetScope","tagName","toLowerCase","$digest","positionDropdown","offset","style","after","originalWidth","position","resetDropdown","replaceWith","generatedId","baseTitle","title","focusserTitle","focusserId","onRemoveCallback","onRemove","choiceGrouped","tabindex","taggingEval","autofocus","focusOn","transcluded","transcludedMatch","transcludedChoices","isOpen","multi","setAllowClear","allow","allowClear","uiLockChoice","$evalAsync","activeMatchIndex","updateModel","now","refreshComponent","removeChoice","removedChoice","splice","getPlaceholder","_getCaretPosition","el","isNumber","selectionStart","_handleMatchSelection","getNewActiveMatchIndex","$selectMultiple","last","curr","next","caretPosition","first","newIndex","Math","min","max","_findCaseInsensitiveDupe","arr","_findApproxDupe","haystack","needle","dupeIndex","tempArr","copy","mockObj","isTag","unshift","result","resultMultiple","j","inputValue","checkFnMultiple","list","p","exec","oldValue","tagItems","tagItem","stashArr","hasTag","slice","origItem","match","checkFnSingle","d","val","uiSelectSort","axis","uiSelectSortOptions","draggingClassName","droppingClassName","droppingBeforeClassName","droppingAfterClassName","n","dataTransfer","setData","$index","dropTimeout","move","from","to","dragOverHandler","offsetY","layerY","offsetX","layerX","dropHandler","droppedItemIndex","parseInt","_dropHandler","theList","itemToMove","hasClass","array","self","expression","grouped","run","$templateCache","put"],"mappings":"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","file":"component.js","sourcesContent":["/* \r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n(function(){\r\n    \r\n    'use strict';\r\n\r\n    angular.module('toolbarButtons', [])\r\n\r\n    .directive('filterButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"{{tooltipText}}\" class=\"btn btn-default btn-mini btn-toolbar filterBtn\" data-toggle=\"dropdown\">\\n\\\r\n                                <a class=\"toolbar-icon filter\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu awk-df-form-dropdown-filter awk-df-form-dropdown pull-right\" role=\"menu\" >\\n\\\r\n                                <li >\\n\\\r\n                                    <form name=\"form\" role=\"form\" style=\"padding: 10px; \">\\n\\\r\n                                        <div form-directive ></div>\\n\\\r\n                                    </form>\\n\\\r\n                                </li>\\n\\\r\n                            </ul>\\n\\\r\n                    </div>',\r\n                scope: {\r\n                    tooltipText: '@',\r\n                    iconClass: '@',\r\n                    fieldVal: '@',\r\n                    submitLabel: '@',\r\n                    clearLabel: '@',\r\n                    submitFunc: '@',\r\n                    clearFunc: '@'\r\n                   \r\n                },\r\n                /**/\r\n                link: function(scope, elem, attrs) {\r\n\r\n                    //scope.$parent.iconClass = scope.iconClass;\r\n                    //var iconBtn = elem.find('a');\r\n                    //iconBtn..attr('class', \"toolbar-icon \"+iconClass);\r\n                    var childDir = elem.find('div');\r\n                    childDir.attr('filter-fields', scope.fieldVal);\r\n                    childDir.attr('filter-array-name', scope.fieldVal);\r\n                    childDir.attr('submit-label', scope.submitLabel);\r\n                    childDir.attr('clear-label', scope.clearLabel);\r\n                    childDir.attr('on-submit', scope.submitFunc);\r\n                    childDir.attr('on-clear', scope.clearFunc);\r\n                    elem.on('show.bs.dropdown', function (event) {\r\n                        scope.$emit(\"filterDropDownOpened\",{\"target\":event.currentTarget});\r\n                    })\r\n                   // $compile(childDir.contents())(scope.$parent);\r\n                    $compile(elem.contents())(scope.$parent);\r\n                }\r\n                /**/\r\n            };\r\n        }])\r\n\r\n\r\n\r\n    /*REPORT BUTTON*/\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name reportButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the report button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'action' attribute.\r\n\r\n     * @example <span report-button action=\"generateReportFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('reportButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button title=\"View report\" class=\"btn btn-default btn-mini\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <i class=\"glyphicon glyphicon-stats\"></i>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu pull-right\" role=\"menu\">\\n\\\r\n                                <div>\\n\\\r\n                                    <img src=\"../app/assets/img/report.png\"></img>\\n\\\r\n                                 </div>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&'\r\n                },\r\n                link: function(scope, elem, attrs) {\r\n                    /*\r\n                    var btnElem = elem.find('button');\r\n                    btnElem.attr('ng-click', scope.saveFunction);\r\n                    $compile(elem.contents())(scope.$parent);\r\n                    */\r\n                }\r\n            }\r\n\r\n        }])\r\n\r\n\r\n\r\n    /*CREATE REPORT BUTTON*/    \r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n\r\n    .directive('createReportBtn', ['$compile', function($compile) {\r\n\r\n        console.log('in new directive');\r\n        return{\r\n            restrict: 'A',\r\n            replace: true,\r\n            template: '<div class=\"dropdown btn-group\">\\n\\\r\n                        <button tooltip=\"{{tooltipText}}\" class=\"btn btn-default btn-mini btn-toolbar filterBtn\" data-toggle=\"dropdown\">\\n\\\r\n                            <a class=\"toolbar-icon createReport\"></a>\\n\\\r\n                        </button>\\n\\\r\n                        <ul class=\"dropdown-menu form-dropdown-filter toolbar-dropdown pull-right\" role=\"menu\">\\n\\\r\n                            <li >\\n\\\r\n                                <form name=\"form\" role=\"form\" class=\"form\" style=\"padding: 10px; \">\\n\\\r\n                                    <div form-directive ></div>\\n\\\r\n                                </form>\\n\\\r\n                            </li>\\n\\\r\n                        </ul>\\n\\\r\n                </div>',\r\n            scope: {\r\n                tooltipText: '@',\r\n                iconClass: '@',\r\n                fieldVal: '@',\r\n                submitLabel: '@',\r\n                clearLabel: '@',\r\n                submitFunc: '@',\r\n                clearFunc: '@'\r\n            },\r\n            /**/\r\n            link: function(scope, elem, attrs) {\r\n\r\n                console.log('ff: ', scope.fieldVal);\r\n                console.log('sf: ', scope.searchFunc);\r\n                //scope.$parent.iconClass = scope.iconClass;\r\n                //var iconBtn = elem.find('a');\r\n                //iconBtn..attr('class', \"toolbar-icon \"+iconClass);\r\n                var childDir = elem.find('div');\r\n                childDir.attr('filter-fields', scope.fieldVal);\r\n                childDir.attr('filter-array-name', scope.fieldVal);\r\n                childDir.attr('submit-label', scope.submitLabel);\r\n                childDir.attr('clear-label', scope.clearLabel);\r\n                childDir.attr('on-submit', scope.submitFunc);\r\n                childDir.attr('on-clear', scope.clearFunc);\r\n               // $compile(childDir.contents())(scope.$parent);\r\n                $compile(elem.contents())(scope.$parent);\r\n            }\r\n            /**/\r\n        };\r\n    }])\r\n\r\n\r\n    /*RESET BUTTON*/\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name resetButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the reset button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'action' attribute.\r\n\r\n     * @example <span reset-button action=\"resetFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('resetButton', ['$rootScope','$compile', function($rootScope, $compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Refresh\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <a class=\"toolbar-icon refresh\"></a>\\n\\\r\n                            </button>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action:'&'\r\n                }\r\n            }\r\n\r\n        }])\r\n\r\n\r\n    /*TOOLBAR BUTTON*/\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name toolbarButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'action' attribute.\r\n     * This button can be used as a template to create toolbar button by providing a tooltip, icon and action.\r\n\r\n     * @example <span toolbar-button tooltip-text=\"Click here\" icon-class=\"someCssClass\" action=\"someFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('toolbarButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"{{tooltipText}}\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <a class=\"toolbar-icon {{iconClass}}\"></a>\\n\\\r\n                            </button>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    tooltipText:'@',\r\n                    iconClass:'@',\r\n                    action: '&'\r\n                }\r\n            }\r\n\r\n        }])\r\n\r\n\r\n    /*EXPORT BUTTON*/\r\n\r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n    .directive('exportButton', ['$compile', 'eventConstants', \r\n        function($compile, eventConstants) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Export\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <a class=\"toolbar-icon export\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu toolbar-dropdown pull-right\" role=\"menu\">\\n\\\r\n                                    <li><a href=\"#\" ng-click=\"exportasXLS()\"><img src=\"styles/img/toolbar_icons/spreadsheet.png\"></img>  XLS</a></li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&'\r\n                },\r\n                controller: ['$scope', function($scope) {\r\n\r\n               \r\n                /**\r\n                 * @ngdoc function\r\n                 * @name exportasCSV\r\n                 * @description \r\n                 * To export the grid data in CSV format.\r\n                 * It broadcasts a global event 'exportasCSV' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */\r\n               $scope.exportasCSV = function() {\r\n                    $scope.$emit(eventConstants.EXPORT_AS_CSV);\r\n                }; \r\n\r\n\r\n                /**\r\n                 * @ngdoc function\r\n                 * @name exportasXLS\r\n                 * @description \r\n                 * To export the grid data in XLS format.\r\n                 * It broadcasts a global event 'exportasXLS' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.exportasXLS = function() {\r\n                    $scope.$emit(eventConstants.EXPORT_AS_XLS);\r\n                };  \r\n\r\n                 /**\r\n                 * @ngdoc function\r\n                 * @name exportasPDF\r\n                 * @description \r\n                 * To export the grid data in PDF format.\r\n                 * It broadcasts a global event 'exportasPDF' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.exportasPDF = function() {\r\n                    $scope.$emit(eventConstants.EXPORT_AS_PDF);\r\n                };  \r\n\r\n            }]\r\n            };\r\n\r\n        }])\r\n\r\n\r\n    /*FILE BUTTON*/\r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n    .directive('fileButton', ['$compile', 'eventConstants', \r\n        function($compile, eventConstants) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\" style=\"margin:0px;\">\\n\\\r\n                            <button tooltip=\"File Upload\" class=\"btn btn-default btn-mini btn-toolbar filterBtn\" data-toggle=\"dropdown\" >\\n\\\r\n                                <a class=\"toolbar-icon upload\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu toolbar-dropdown-filter pull-right\" role=\"menu\" style=\"padding:0px;\">\\n\\\r\n                                    <li>\\n\\\r\n                                        <form class=\"fileUplaodBtn\">\\n\\\r\n                                            <div uploader ></div>\\n\\\r\n                                        </form>\\n\\\r\n                                    </li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&',\r\n                    fileConfigUrl:'@',\r\n                    fileUploadUrl:'@',\r\n                    isMultipleFile:'@',\r\n                    userId:'@',\r\n                    monthList: '=',\r\n                    yearList:'='\r\n                },\r\n                link: function(scope, elem, attrs) {\r\n                    $compile(elem.contents())(scope.$parent);\r\n                }\r\n            };\r\n\r\n        }])\r\n\r\n\r\n    /*SAVE BUTTON*/\r\n\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name saveButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the save button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'saveFunction' & 'saveAsFunction' attribute.\r\n\r\n     * @example <span save-button save-function=\"someFunction()\" save-as-function=\"someOtherFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('saveButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Save\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\">\\n\\\r\n                                <a class=\"toolbar-icon save\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu pull-right\" role=\"menu\">\\n\\\r\n                                    <li><a href=\"#\" ng-click=\"saveFunction()\">1. Save</a></li>\\n\\\r\n                                    <li><a href=\"#\" ng-click=\"saveAsFunction()\">2. Save as</a></li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    saveFunction: '&',\r\n                    saveAsFunction: '&'\r\n                    }\r\n                }\r\n\r\n        }])\r\n\r\n\r\n    /*UPLOAD BUTTON*/\r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n    .directive('uploadButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Upload\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <i class=\"toolbar-icon glyphicon glyphicon-upload\"></i>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu pull-right\" role=\"menu\">\\n\\\r\n                                    <li><a href=\"#\" onclick=\"uploadasXLS()\">1. XLS</a></li>\\n\\\r\n                                    <li><a href=\"#\" onclick=\"uploadasCSV()\">2. CSV</a></li>\\n\\\r\n                                    <li><a href=\"#\" onclick=\"uploadasDelimited()\">3. Delimited</a></li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&'\r\n                },\r\n\r\n                controller: ['$scope', function($scope) {\r\n\r\n               \r\n                /**\r\n                 * @ngdoc function\r\n                 * @name uploadasCSV\r\n                 * @description \r\n                 * To upload the grid data in CSV format.\r\n                 * It broadcasts a global event 'uploadasCSV' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */\r\n               $scope.uploadasCSV = function() {\r\n\r\n                    $rootScope.$broadcast(eventConstants.UPLOAD_AS_CSV);\r\n                }; \r\n\r\n\r\n                /**\r\n                 * @ngdoc function\r\n                 * @name uploadasXLS\r\n                 * @description \r\n                 * To upload the grid data in XLS format.\r\n                 * It broadcasts a global event 'uploadasXLS' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.uploadasXLS = function() {\r\n\r\n                    $rootScope.$broadcast(eventConstants.UPLOAD_AS_XLS);\r\n                };  \r\n\r\n                 /**\r\n                 * @ngdoc function\r\n                 * @name uploadasDelimited\r\n                 * @description \r\n                 * To export the grid data in PDF format.\r\n                 * It broadcasts a global event 'uploadasDelimited' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.uploadasDelimited = function() {\r\n\r\n                    $rootScope.$broadcast(eventConstants.UPLOAD_AS_DELIMITED);\r\n                };  \r\n\r\n            }]\r\n            };\r\n\r\n        }]);\r\n\r\n})();\r\n\r\n","/**\r\n * Enhanced Select2 Dropmenus\r\n *\r\n * @AJAX Mode - When in this mode, your value will be an object (or array of objects) of the data used by Select2\r\n *     This change is so that you do not have to do an additional query yourself on top of Select2's own query\r\n * @params [options] {object} The configuration options passed to $.fn.select2(). Refer to the documentation\r\n */\r\nangular.module('ui.select2', []).value('uiSelect2Config', {}).directive('uiSelect2', ['uiSelect2Config', '$timeout', function (uiSelect2Config, $timeout) {\r\n  var options = {};\r\n  if (uiSelect2Config) {\r\n    angular.extend(options, uiSelect2Config);\r\n  }\r\n  return {\r\n    require: 'ngModel',\r\n    priority: 1,\r\n    compile: function (tElm, tAttrs) {\r\n      var watch,\r\n        repeatOption,\r\n        repeatAttr,\r\n        isSelect = tElm.is('select'),\r\n        isMultiple = angular.isDefined(tAttrs.multiple);\r\n\r\n      // Enable watching of the options dataset if in use\r\n      if (tElm.is('select')) {\r\n        repeatOption = tElm.find( 'optgroup[ng-repeat], optgroup[data-ng-repeat], option[ng-repeat], option[data-ng-repeat]');\r\n\r\n        if (repeatOption.length) {\r\n          repeatAttr = repeatOption.attr('ng-repeat') || repeatOption.attr('data-ng-repeat');\r\n          watch = jQuery.trim(repeatAttr.split('|')[0]).split(' ').pop();\r\n        }\r\n      }\r\n\r\n      return function (scope, elm, attrs, controller) {\r\n        // instance-specific options\r\n        var opts = angular.extend({}, options, scope.$eval(attrs.uiSelect2));\r\n\r\n        /*\r\n        Convert from Select2 view-model to Angular view-model.\r\n        */\r\n        var convertToAngularModel = function(select2_data) {\r\n          var model;\r\n          if (opts.simple_tags) {\r\n            model = [];\r\n            angular.forEach(select2_data, function(value, index) {\r\n              model.push(value.id);\r\n            });\r\n          } else {\r\n            model = select2_data;\r\n          }\r\n          return model;\r\n        };\r\n\r\n        /*\r\n        Convert from Angular view-model to Select2 view-model.\r\n        */\r\n        var convertToSelect2Model = function(angular_data) {\r\n          var model = [];\r\n          if (!angular_data) {\r\n            return model;\r\n          }\r\n\r\n          if (opts.simple_tags) {\r\n            model = [];\r\n            angular.forEach(\r\n              angular_data,\r\n              function(value, index) {\r\n                model.push({'id': value, 'text': value});\r\n              });\r\n          } else {\r\n            model = angular_data;\r\n          }\r\n          return model;\r\n        };\r\n\r\n        if (isSelect) {\r\n          // Use <select multiple> instead\r\n          delete opts.multiple;\r\n          delete opts.initSelection;\r\n        } else if (isMultiple) {\r\n          opts.multiple = true;\r\n        }\r\n\r\n        if (controller) {\r\n          // Watch the model for programmatic changes\r\n           scope.$watch(tAttrs.ngModel, function(current, old) {\r\n            if (!current) {\r\n              return;\r\n            }\r\n            if (current === old) {\r\n              return;\r\n            }\r\n            controller.$render();\r\n          }, true);\r\n          controller.$render = function () {\r\n            if (isSelect) {\r\n              elm.select2('val', controller.$viewValue);\r\n            } else {\r\n              if (opts.multiple) {\r\n                var viewValue = controller.$viewValue;\r\n                if (angular.isString(viewValue)) {\r\n                  viewValue = viewValue.split(',');\r\n                }\r\n                elm.select2(\r\n                  'data', convertToSelect2Model(viewValue));\r\n              } else {\r\n                if (angular.isObject(controller.$viewValue)) {\r\n                  elm.select2('data', controller.$viewValue);\r\n                } else if (!controller.$viewValue) {\r\n                  elm.select2('data', null);\r\n                } else {\r\n                  elm.select2('val', controller.$viewValue);\r\n                }\r\n              }\r\n            }\r\n          };\r\n\r\n          // Watch the options dataset for changes\r\n          if (watch) {\r\n            scope.$watch(watch, function (newVal, oldVal, scope) {\r\n              if (angular.equals(newVal, oldVal)) {\r\n                return;\r\n              }\r\n              // Delayed so that the options have time to be rendered\r\n              $timeout(function () {\r\n                elm.select2('val', controller.$viewValue);\r\n                // Refresh angular to remove the superfluous option\r\n                elm.trigger('change');\r\n                if(newVal && !oldVal && controller.$setPristine) {\r\n                  controller.$setPristine(true);\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n          // Update valid and dirty statuses\r\n          controller.$parsers.push(function (value) {\r\n            var div = elm.prev();\r\n            div\r\n              .toggleClass('ng-invalid', !controller.$valid)\r\n              .toggleClass('ng-valid', controller.$valid)\r\n              .toggleClass('ng-invalid-required', !controller.$valid)\r\n              .toggleClass('ng-valid-required', controller.$valid)\r\n              .toggleClass('ng-dirty', controller.$dirty)\r\n              .toggleClass('ng-pristine', controller.$pristine);\r\n            return value;\r\n          });\r\n\r\n          if (!isSelect) {\r\n            // Set the view and model value and update the angular template manually for the ajax/multiple select2.\r\n            elm.bind(\"change\", function (e) {\r\n              e.stopImmediatePropagation();\r\n              \r\n              if (scope.$$phase || scope.$root.$$phase) {\r\n                return;\r\n              }\r\n              scope.$apply(function () {\r\n                controller.$setViewValue(\r\n                  convertToAngularModel(elm.select2('data')));\r\n              });\r\n            });\r\n\r\n            if (opts.initSelection) {\r\n              var initSelection = opts.initSelection;\r\n              opts.initSelection = function (element, callback) {\r\n                initSelection(element, function (value) {\r\n                  var isPristine = controller.$pristine;\r\n                  controller.$setViewValue(convertToAngularModel(value));\r\n                  callback(value);\r\n                  if (isPristine) {\r\n                    controller.$setPristine();\r\n                  }\r\n                  elm.prev().toggleClass('ng-pristine', controller.$pristine);\r\n                });\r\n              };\r\n            }\r\n          }\r\n        }\r\n\r\n        elm.bind(\"$destroy\", function() {\r\n          elm.select2(\"destroy\");\r\n        });\r\n\r\n        attrs.$observe('disabled', function (value) {\r\n          elm.select2('enable', !value);\r\n        });\r\n\r\n        attrs.$observe('readonly', function (value) {\r\n          elm.select2('readonly', !!value);\r\n        });\r\n\r\n        if (attrs.ngMultiple) {\r\n          scope.$watch(attrs.ngMultiple, function(newVal) {\r\n            attrs.$set('multiple', !!newVal);\r\n            elm.select2(opts);\r\n          });\r\n        }\r\n\r\n        // Initialize the plugin late so that the injected DOM does not disrupt the template compiler\r\n        $timeout(function () {\r\n          elm.select2(opts);\r\n\r\n          // Set initial value - I'm not sure about this but it seems to need to be there\r\n          elm.select2('data', controller.$modelValue);\r\n          // important!\r\n          controller.$render();\r\n\r\n          // Not sure if I should just check for !isSelect OR if I should check for 'tags' key\r\n          if (!opts.initSelection && !isSelect) {\r\n            var isPristine = controller.$pristine;\r\n            controller.$setViewValue(\r\n              convertToAngularModel(elm.select2('data'))\r\n            );\r\n            if (isPristine) {\r\n              controller.$setPristine();\r\n            }\r\n            elm.prev().toggleClass('ng-pristine', controller.$pristine);\r\n          }\r\n        });\r\n      };\r\n    }\r\n  };\r\n}]);","/*global angular */\n/*\n jQuery UI Datepicker plugin wrapper\n\n @note If ≤ IE8 make sure you have a polyfill for Date.toISOString()\n @param [ui-date] {object} Options to pass to $.fn.datepicker() merged onto uiDateConfig\n */\n\nangular.module('ui.date', [])\n\n.constant('uiDateConfig', {})\n\n.directive('uiDate', ['uiDateConfig', function (uiDateConfig) {\n  'use strict';\n  var options;\n  options = {};\n  angular.extend(options, uiDateConfig);\n  return {\n    require:'?ngModel',\n    link:function (scope, element, attrs, controller) {\n      var getOptions = function () {\n        return angular.extend({}, uiDateConfig, scope.$eval(attrs.uiDate));\n      };\n      var initDateWidget = function () {\n        var showing = false;\n        var opts = getOptions();\n\n        // If we have a controller (i.e. ngModelController) then wire it up\n        if (controller) {\n\n          // Set the view value in a $apply block when users selects\n          // (calling directive user's function too if provided)\n          var _onSelect = opts.onSelect || angular.noop;\n          opts.onSelect = function (value, picker) {\n            scope.$apply(function() {\n              showing = true;\n              controller.$setViewValue(element.datepicker(\"getDate\"));\n              _onSelect(value, picker);\n              element.blur();\n              scope.$emit( 'ngGridEventEndCellEdit' ); \n            });\n          };\n          opts.beforeShow = function() {\n            showing = true;\n          };\n          opts.onClose = function(value, picker) {\n            showing = false;\n          };\n          scope.$on('ngGridEventStartCellEdit', function () {\n        \t  element.focus(); \n          });\n          element.on('blur', function() {\n            if ( !showing ) {\n              scope.$apply(function() {\n                element.datepicker(\"setDate\", element.datepicker(\"getDate\"));\n                controller.$setViewValue(element.datepicker(\"getDate\"));\n              });\n            }\n          });\n\n          // Update the date picker when the model changes\n          controller.$render = function () {\n            var date = controller.$viewValue;\n            if ( angular.isDefined(date) && date !== null && !angular.isDate(date) ) {\n              throw new Error('ng-Model value must be a Date object - currently it is a ' + typeof date + ' - use ui-date-format to convert it from a string');\n            }\n            element.datepicker(\"setDate\", date);\n          };\n        }\n        // If we don't destroy the old one it doesn't update properly when the config changes\n        element.datepicker('destroy');\n        // Create the new datepicker widget\n        element.datepicker(opts);\n        if ( controller ) {\n          // Force a render to override whatever is in the input text box\n          controller.$render();\n        }\n      };\n      // Watch for changes to the directives options\n      scope.$watch(getOptions, initDateWidget, true);\n    }\n  };\n}\n])\n\n.constant('uiDateFormatConfig', '')\n\n.directive('uiDateFormat', ['uiDateFormatConfig', function(uiDateFormatConfig) {\n  var directive = {\n    require:'ngModel',\n    link: function(scope, element, attrs, modelCtrl) {\n      var dateFormat = attrs.uiDateFormat || uiDateFormatConfig;\n      if ( dateFormat ) {\n        // Use the datepicker with the attribute value as the dateFormat string to convert to and from a string\n        modelCtrl.$formatters.push(function(value) {\n          if (angular.isString(value) ) {\n            return jQuery.datepicker.parseDate(dateFormat, value);\n          }\n          return null;\n        });\n        modelCtrl.$parsers.push(function(value){\n          if (value) {\n            return jQuery.datepicker.formatDate(dateFormat, value);\n          }\n          return null;\n        });\n      } else {\n        // Default to ISO formatting\n        modelCtrl.$formatters.push(function(value) {\n          if (angular.isString(value) ) {\n            return new Date(value);\n          }\n          return null;\n        });\n        modelCtrl.$parsers.push(function(value){\n          if (value) {\n            return value.toISOString();\n          }\n          return null;\n        });\n      }\n    }\n  };\n  return directive;\n}]);\n","$(function() {\n\n    $('#side-menu').metisMenu();\n\n});\n\n//Loads the correct sidebar on window load,\n//collapses the sidebar on window resize.\n// Sets the min-height of #page-wrapper to window size\n$(function() {\n    $(window).bind(\"load resize\", function() {\n        topOffset = 50;\n        width = (this.window.innerWidth > 0) ? this.window.innerWidth : this.screen.width;\n        if (width < 768) {\n            $('div.navbar-collapse').addClass('collapse');\n            topOffset = 100; // 2-row-menu\n        } else {\n            $('div.navbar-collapse').removeClass('collapse');\n        }\n\n        height = ((this.window.innerHeight > 0) ? this.window.innerHeight : this.screen.height) - 1;\n        height = height - topOffset;\n        if (height < 1) height = 1;\n        if (height > topOffset) {\n            $(\"#page-wrapper\").css(\"min-height\", (height) + \"px\");\n        }\n    });\n\n    var url = window.location;\n    var element = $('ul.nav a').filter(function() {\n        return this.href == url || url.href.indexOf(this.href) == 0;\n    }).addClass('active').parent().parent().addClass('in').parent();\n    if (element.is('li')) {\n        element.addClass('active');\n    }\n});\n","/*!\r\n * ui-select\r\n * http://github.com/angular-ui/ui-select\r\n * Version: 0.11.2 - 2015-03-17T04:08:46.474Z\r\n * License: MIT\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var KEY = {\r\n        TAB: 9,\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        SPACE: 32,\r\n        LEFT: 37,\r\n        UP: 38,\r\n        RIGHT: 39,\r\n        DOWN: 40,\r\n        SHIFT: 16,\r\n        CTRL: 17,\r\n        ALT: 18,\r\n        PAGE_UP: 33,\r\n        PAGE_DOWN: 34,\r\n        HOME: 36,\r\n        END: 35,\r\n        BACKSPACE: 8,\r\n        DELETE: 46,\r\n        COMMAND: 91,\r\n\r\n        MAP: {\r\n            91: \"COMMAND\",\r\n            8: \"BACKSPACE\",\r\n            9: \"TAB\",\r\n            13: \"ENTER\",\r\n            16: \"SHIFT\",\r\n            17: \"CTRL\",\r\n            18: \"ALT\",\r\n            19: \"PAUSEBREAK\",\r\n            20: \"CAPSLOCK\",\r\n            27: \"ESC\",\r\n            32: \"SPACE\",\r\n            33: \"PAGE_UP\",\r\n            34: \"PAGE_DOWN\",\r\n            35: \"END\",\r\n            36: \"HOME\",\r\n            37: \"LEFT\",\r\n            38: \"UP\",\r\n            39: \"RIGHT\",\r\n            40: \"DOWN\",\r\n            43: \"+\",\r\n            44: \"PRINTSCREEN\",\r\n            45: \"INSERT\",\r\n            46: \"DELETE\",\r\n            48: \"0\",\r\n            49: \"1\",\r\n            50: \"2\",\r\n            51: \"3\",\r\n            52: \"4\",\r\n            53: \"5\",\r\n            54: \"6\",\r\n            55: \"7\",\r\n            56: \"8\",\r\n            57: \"9\",\r\n            59: \";\",\r\n            61: \"=\",\r\n            65: \"A\",\r\n            66: \"B\",\r\n            67: \"C\",\r\n            68: \"D\",\r\n            69: \"E\",\r\n            70: \"F\",\r\n            71: \"G\",\r\n            72: \"H\",\r\n            73: \"I\",\r\n            74: \"J\",\r\n            75: \"K\",\r\n            76: \"L\",\r\n            77: \"M\",\r\n            78: \"N\",\r\n            79: \"O\",\r\n            80: \"P\",\r\n            81: \"Q\",\r\n            82: \"R\",\r\n            83: \"S\",\r\n            84: \"T\",\r\n            85: \"U\",\r\n            86: \"V\",\r\n            87: \"W\",\r\n            88: \"X\",\r\n            89: \"Y\",\r\n            90: \"Z\",\r\n            96: \"0\",\r\n            97: \"1\",\r\n            98: \"2\",\r\n            99: \"3\",\r\n            100: \"4\",\r\n            101: \"5\",\r\n            102: \"6\",\r\n            103: \"7\",\r\n            104: \"8\",\r\n            105: \"9\",\r\n            106: \"*\",\r\n            107: \"+\",\r\n            109: \"-\",\r\n            110: \".\",\r\n            111: \"/\",\r\n            112: \"F1\",\r\n            113: \"F2\",\r\n            114: \"F3\",\r\n            115: \"F4\",\r\n            116: \"F5\",\r\n            117: \"F6\",\r\n            118: \"F7\",\r\n            119: \"F8\",\r\n            120: \"F9\",\r\n            121: \"F10\",\r\n            122: \"F11\",\r\n            123: \"F12\",\r\n            144: \"NUMLOCK\",\r\n            145: \"SCROLLLOCK\",\r\n            186: \";\",\r\n            187: \"=\",\r\n            188: \",\",\r\n            189: \"-\",\r\n            190: \".\",\r\n            191: \"/\",\r\n            192: \"`\",\r\n            219: \"[\",\r\n            220: \"\\\\\",\r\n            221: \"]\",\r\n            222: \"'\"\r\n        },\r\n\r\n        isControl: function(e) {\r\n            var k = e.which;\r\n            switch (k) {\r\n                case KEY.COMMAND:\r\n                case KEY.SHIFT:\r\n                case KEY.CTRL:\r\n                case KEY.ALT:\r\n                    return true;\r\n            }\r\n\r\n            if (e.metaKey) return true;\r\n\r\n            return false;\r\n        },\r\n        isFunctionKey: function(k) {\r\n            k = k.which ? k.which : k;\r\n            return k >= 112 && k <= 123;\r\n        },\r\n        isVerticalMovement: function(k) {\r\n            return ~[KEY.UP, KEY.DOWN].indexOf(k);\r\n        },\r\n        isHorizontalMovement: function(k) {\r\n            //return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);\r\n            return ~[KEY.LEFT, KEY.RIGHT].indexOf(k);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add querySelectorAll() to jqLite.\r\n     *\r\n     * jqLite find() is limited to lookups by tag name.\r\n     * TODO This will change with future versions of AngularJS, to be removed when this happens\r\n     *\r\n     * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586\r\n     * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598\r\n     */\r\n    if (angular.element.prototype.querySelectorAll === undefined) {\r\n        angular.element.prototype.querySelectorAll = function(selector) {\r\n            return angular.element(this[0].querySelectorAll(selector));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Add closest() to jqLite.\r\n     */\r\n    if (angular.element.prototype.closest === undefined) {\r\n        angular.element.prototype.closest = function(selector) {\r\n            var elem = this[0];\r\n            var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n\r\n            while (elem) {\r\n                if (matchesSelector.bind(elem)(selector)) {\r\n                    return elem;\r\n                } else {\r\n                    elem = elem.parentElement;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    }\r\n\r\n    var latestId = 0;\r\n\r\n    var uis = angular.module('ui.select', [])\r\n\r\n    .constant('uiSelectConfig', {\r\n        theme: 'bootstrap',\r\n        searchEnabled: true,\r\n        sortable: false,\r\n        placeholder: '', // Empty by default, like HTML tag <select>\r\n        refreshDelay: 1000, // In milliseconds\r\n        closeOnSelect: true,\r\n        generateId: function() {\r\n            return latestId++;\r\n        },\r\n        appendToBody: false\r\n    })\r\n\r\n    // See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913\r\n    .service('uiSelectMinErr', function() {\r\n        var minErr = angular.$$minErr('ui.select');\r\n        return function() {\r\n            var error = minErr.apply(this, arguments);\r\n            var message = error.message.replace(new RegExp('\\nhttp://errors.angularjs.org/.*'), '');\r\n            return new Error(message);\r\n        };\r\n    })\r\n\r\n    // Recreates old behavior of ng-transclude. Used internally.\r\n    .directive('uisTranscludeAppend', function() {\r\n        return {\r\n            link: function(scope, element, attrs, ctrl, transclude) {\r\n                transclude(scope, function(clone) {\r\n                    element.append(clone);\r\n                });\r\n            }\r\n        };\r\n    })\r\n\r\n    /**\r\n     * Highlights text that matches $select.search.\r\n     *\r\n     * Taken from AngularUI Bootstrap Typeahead\r\n     * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340\r\n     */\r\n    .filter('highlight', function() {\r\n        function escapeRegexp(queryToEscape) {\r\n            return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\r\n        }\r\n\r\n        return function(matchItem, query) {\r\n            return query && matchItem ? matchItem.replace(new RegExp(escapeRegexp(query), 'gi'), '<span class=\"ui-select-highlight\">$&</span>') : matchItem;\r\n        };\r\n    })\r\n\r\n    /**\r\n     * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/\r\n     *\r\n     * Taken from AngularUI Bootstrap Position:\r\n     * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70\r\n     */\r\n    .factory('uisOffset', ['$document', '$window',\r\n        function($document, $window) {\r\n\r\n            return function(element) {\r\n                var boundingClientRect = element[0].getBoundingClientRect();\r\n                return {\r\n                    width: boundingClientRect.width || element.prop('offsetWidth'),\r\n                    height: boundingClientRect.height || element.prop('offsetHeight'),\r\n                    top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),\r\n                    left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)\r\n                };\r\n            };\r\n        }\r\n    ]);\r\n\r\n    uis.directive('uiSelectChoices', ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile',\r\n        function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile) {\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                require: '^uiSelect',\r\n                replace: true,\r\n                transclude: true,\r\n                templateUrl: function(tElement) {\r\n                    // Gets theme attribute from parent (ui-select)\r\n                    var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;\r\n                    return theme + '/choices.tpl.html';\r\n                },\r\n\r\n                compile: function(tElement, tAttrs) {\r\n\r\n                    if (!tAttrs.repeat) throw uiSelectMinErr('repeat', \"Expected 'repeat' expression.\");\r\n\r\n                    return function link(scope, element, attrs, $select, transcludeFn) {\r\n\r\n                        // var repeat = RepeatParser.parse(attrs.repeat);\r\n                        var groupByExp = attrs.groupBy;\r\n\r\n                        $select.parseRepeatAttr(attrs.repeat, groupByExp); //Result ready at $select.parserResult\r\n\r\n                        $select.disableChoiceExpression = attrs.uiDisableChoice;\r\n                        $select.onHighlightCallback = attrs.onHighlight;\r\n\r\n                        if (groupByExp) {\r\n                            var groups = element.querySelectorAll('.ui-select-choices-group');\r\n                            if (groups.length !== 1) throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-group but got '{0}'.\", groups.length);\r\n                            groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());\r\n                        }\r\n\r\n                        var choices = element.querySelectorAll('.ui-select-choices-row');\r\n                        if (choices.length !== 1) {\r\n                            throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-row but got '{0}'.\", choices.length);\r\n                        }\r\n\r\n                        choices.attr('ng-repeat', RepeatParser.getNgRepeatExpression($select.parserResult.itemName, '$select.items', $select.parserResult.trackByExp, groupByExp))\r\n                            .attr('ng-if', '$select.open') //Prevent unnecessary watches when dropdown is closed\r\n                            .attr('ng-mouseenter', '$select.setActiveItem(' + $select.parserResult.itemName + ')')\r\n                            .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',false,$event)');\r\n\r\n                        var rowsInner = element.querySelectorAll('.ui-select-choices-row-inner');\r\n                        if (rowsInner.length !== 1) throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-row-inner but got '{0}'.\", rowsInner.length);\r\n                        rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat\r\n\r\n                        $compile(element, transcludeFn)(scope); //Passing current transcludeFn to be able to append elements correctly from uisTranscludeAppend\r\n\r\n                        scope.$watch('$select.search', function(newValue) {\r\n                            if (newValue && !$select.open && $select.multiple) $select.activate(false, true);\r\n                            $select.activeIndex = $select.tagging.isActivated ? -1 : 0;\r\n                            $select.refresh(attrs.refresh);\r\n                        });\r\n\r\n                        attrs.$observe('refreshDelay', function() {\r\n                            // $eval() is needed otherwise we get a string instead of a number\r\n                            var refreshDelay = scope.$eval(attrs.refreshDelay);\r\n                            $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;\r\n                        });\r\n                    };\r\n                }\r\n            };\r\n        }\r\n    ]);\r\n\r\n    /**\r\n     * Contains ui-select \"intelligence\".\r\n     *\r\n     * The goal is to limit dependency on the DOM whenever possible and\r\n     * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.\r\n     */\r\n    uis.controller('uiSelectCtrl', ['$scope', '$element', '$timeout', '$filter', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig',\r\n        function($scope, $element, $timeout, $filter, RepeatParser, uiSelectMinErr, uiSelectConfig) {\r\n\r\n            var ctrl = this;\r\n\r\n            var EMPTY_SEARCH = '';\r\n\r\n            ctrl.placeholder = uiSelectConfig.placeholder;\r\n            ctrl.searchEnabled = uiSelectConfig.searchEnabled;\r\n            ctrl.sortable = uiSelectConfig.sortable;\r\n            ctrl.refreshDelay = uiSelectConfig.refreshDelay;\r\n\r\n            ctrl.removeSelected = false; //If selected item(s) should be removed from dropdown list\r\n            ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function\r\n            ctrl.search = EMPTY_SEARCH;\r\n\r\n            ctrl.activeIndex = 0; //Dropdown of choices\r\n            ctrl.items = []; //All available choices\r\n\r\n            ctrl.open = false;\r\n            ctrl.focus = false;\r\n            ctrl.disabled = false;\r\n            ctrl.selected = undefined;\r\n\r\n            ctrl.focusser = undefined; //Reference to input element used to handle focus events\r\n            ctrl.resetSearchInput = true;\r\n            ctrl.multiple = undefined; // Initialized inside uiSelect directive link function\r\n            ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function\r\n            ctrl.tagging = {\r\n                isActivated: false,\r\n                fct: undefined\r\n            };\r\n            ctrl.taggingTokens = {\r\n                isActivated: false,\r\n                tokens: undefined\r\n            };\r\n            ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function\r\n            ctrl.clickTriggeredSelect = false;\r\n            ctrl.$filter = $filter;\r\n\r\n            ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');\r\n            if (ctrl.searchInput.length !== 1) {\r\n                throw uiSelectMinErr('searchInput', \"Expected 1 input.ui-select-search but got '{0}'.\", ctrl.searchInput.length);\r\n            }\r\n\r\n            ctrl.isEmpty = function() {\r\n                return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '';\r\n            };\r\n\r\n            // Most of the time the user does not want to empty the search input when in typeahead mode\r\n            function _resetSearchInput() {\r\n                //console.log(\"_resetSearchInput\")\r\n                if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {\r\n                    //ctrl.search = EMPTY_SEARCH;\r\n                    //reset activeIndex\r\n                    if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {\r\n                        ctrl.activeIndex = ctrl.items.indexOf(ctrl.selected);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user clicks on ui-select, displays the dropdown list\r\n            ctrl.activate = function(initSearchValue, avoidReset) {\r\n                //console.log(\"activate\")\r\n                if (!ctrl.disabled && !ctrl.open) {\r\n                    if (!avoidReset) _resetSearchInput();\r\n\r\n                    $scope.$broadcast('uis:activate');\r\n\r\n                    ctrl.open = true;\r\n\r\n                    ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;\r\n\r\n                    // ensure that the index is set to zero for tagging variants\r\n                    // that where first option is auto-selected\r\n                    if (ctrl.activeIndex === -1 && ctrl.taggingLabel !== false) {\r\n                        ctrl.activeIndex = 0;\r\n                    }\r\n\r\n                    // Give it time to appear before focus\r\n                    $timeout(function() {\r\n                        //console.log(\"timeout\")\r\n                        ctrl.search = initSearchValue || ctrl.search;\r\n                        ctrl.searchInput[0].focus();\r\n                        ctrl.searchInput[0].onblur = ctrl.onRowblur;\r\n                    });\r\n                }\r\n            };\r\n\r\n            ctrl.onRowblur = function() {\r\n                //console.log(\"onRowblur\")\r\n                if (!ctrl.open) {\r\n                    $scope.$emit('focuslost', ctrl.search);\r\n                } else if (!ctrl.searchEnabled) {\r\n                    $scope.$emit('focuslostonopen', ctrl.search);\r\n                }\r\n\r\n                //console.log(\"lost focus******************\", ctrl.search)\r\n            }\r\n            ctrl.findGroupByName = function(name) {\r\n                //console.log(\"findGroupByName\")\r\n                return ctrl.groups && ctrl.groups.filter(function(group) {\r\n                    return group.name === name;\r\n                })[0];\r\n            };\r\n\r\n            ctrl.parseRepeatAttr = function(repeatAttr, groupByExp) {\r\n                //console.log(\"parseRepeatAttr\")\r\n                function updateGroups(items) {\r\n                    ctrl.groups = [];\r\n                    angular.forEach(items, function(item) {\r\n                        var groupFn = $scope.$eval(groupByExp);\r\n                        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];\r\n                        var group = ctrl.findGroupByName(groupName);\r\n                        if (group) {\r\n                            group.items.push(item);\r\n                        } else {\r\n                            ctrl.groups.push({\r\n                                name: groupName,\r\n                                items: [item]\r\n                            });\r\n                        }\r\n                    });\r\n                    ctrl.items = [];\r\n                    ctrl.groups.forEach(function(group) {\r\n                        ctrl.items = ctrl.items.concat(group.items);\r\n                    });\r\n                }\r\n\r\n                function setPlainItems(items) {\r\n                    ctrl.items = items;\r\n                }\r\n\r\n                ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;\r\n\r\n                ctrl.parserResult = RepeatParser.parse(repeatAttr);\r\n\r\n                ctrl.isGrouped = !!groupByExp;\r\n                ctrl.itemProperty = ctrl.parserResult.itemName;\r\n\r\n                ctrl.refreshItems = function(data) {\r\n                    //console.log(\"refreshItems\")\r\n                    data = data || ctrl.parserResult.source($scope);\r\n                    var selectedItems = ctrl.selected;\r\n                    //TODO should implement for single mode removeSelected\r\n                    if ((angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.removeSelected) {\r\n                        ctrl.setItemsFn(data);\r\n                    } else {\r\n                        if (data !== undefined) {\r\n                            var filteredItems = data.filter(function(i) {\r\n                                return selectedItems.indexOf(i) < 0;\r\n                            });\r\n                            ctrl.setItemsFn(filteredItems);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259\r\n                $scope.$watchCollection(ctrl.parserResult.source, function(items) {\r\n                    if (items === undefined || items === null) {\r\n                        // If the user specifies undefined or null => reset the collection\r\n                        // Special case: items can be undefined if the user did not initialized the collection on the scope\r\n                        // i.e $scope.addresses = [] is missing\r\n                        ctrl.items = [];\r\n                    } else {\r\n                        if (!angular.isArray(items)) {\r\n                            throw uiSelectMinErr('items', \"Expected an array but got '{0}'.\", items);\r\n                        } else {\r\n                            //Remove already selected items (ex: while searching)\r\n                            //TODO Should add a test\r\n                            ctrl.refreshItems(items);\r\n                            ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters\r\n                        }\r\n                    }\r\n                });\r\n\r\n            };\r\n\r\n            var _refreshDelayPromise;\r\n\r\n            /**\r\n             * Typeahead mode: lets the user refresh the collection using his own function.\r\n             *\r\n             * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31\r\n             */\r\n            ctrl.refresh = function(refreshAttr) {\r\n                if (refreshAttr !== undefined) {\r\n\r\n                    // Debounce\r\n                    // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155\r\n                    // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177\r\n                    if (_refreshDelayPromise) {\r\n                        $timeout.cancel(_refreshDelayPromise);\r\n                    }\r\n                    _refreshDelayPromise = $timeout(function() {\r\n                        $scope.$eval(refreshAttr);\r\n                    }, ctrl.refreshDelay);\r\n                }\r\n            };\r\n\r\n            ctrl.setActiveItem = function(item) {\r\n                ctrl.activeIndex = ctrl.items.indexOf(item);\r\n            };\r\n\r\n            ctrl.isActive = function(itemScope) {\r\n                //console.log(\"isActive\")\r\n                if (!ctrl.open) {\r\n                    if (ctrl.searchInput && ctrl.searchInput[0]) {\r\n                        //ctrl.search = ctrl.searchInput[0].value;\r\n                        //$scope.$emit('focuslostonopen', ctrl.search);\r\n                    }\r\n                    return false;\r\n                }\r\n                var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);\r\n                var isActive = itemIndex === ctrl.activeIndex;\r\n\r\n                if (!isActive || (itemIndex < 0 && ctrl.taggingLabel !== false) || (itemIndex < 0 && ctrl.taggingLabel === false)) {\r\n                    //console.log(\"isActive 1 \", isActive)\r\n                    return false;\r\n                }\r\n\r\n                if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {\r\n                    itemScope.$eval(ctrl.onHighlightCallback);\r\n                }\r\n\r\n                //console.log(\"isActive \", isActive)\r\n                return isActive;\r\n            };\r\n\r\n            ctrl.isDisabled = function(itemScope) {\r\n                //console.log(\"isDisabled\")\r\n                if (!ctrl.open) return;\r\n\r\n                var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);\r\n                var isDisabled = false;\r\n                var item;\r\n\r\n                if (itemIndex >= 0 && !angular.isUndefined(ctrl.disableChoiceExpression)) {\r\n                    item = ctrl.items[itemIndex];\r\n                    isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression)); // force the boolean value\r\n                    item._uiSelectChoiceDisabled = isDisabled; // store this for later reference\r\n                }\r\n\r\n                return isDisabled;\r\n            };\r\n\r\n\r\n            // When the user selects an item with ENTER or clicks the dropdown\r\n            ctrl.select = function(item, skipFocusser, $event) {\r\n                //console.log(\"select\")\r\n                if (item === undefined || !item._uiSelectChoiceDisabled) {\r\n\r\n                    if (!ctrl.items && !ctrl.search) return;\r\n\r\n                    if (!item || !item._uiSelectChoiceDisabled) {\r\n                        if (ctrl.tagging.isActivated) {\r\n                            // if taggingLabel is disabled, we pull from ctrl.search val\r\n                            if (ctrl.taggingLabel === false) {\r\n                                if (ctrl.activeIndex < 0) {\r\n                                    item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;\r\n                                    if (!item || angular.equals(ctrl.items[0], item)) {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    // keyboard nav happened first, user selected from dropdown\r\n                                    item = ctrl.items[ctrl.activeIndex];\r\n                                }\r\n                            } else {\r\n                                // tagging always operates at index zero, taggingLabel === false pushes\r\n                                // the ctrl.search value without having it injected\r\n                                if (ctrl.activeIndex === 0) {\r\n                                    // ctrl.tagging pushes items to ctrl.items, so we only have empty val\r\n                                    // for `item` if it is a detected duplicate\r\n                                    if (item === undefined) return;\r\n\r\n                                    // create new item on the fly if we don't already have one;\r\n                                    // use tagging function if we have one\r\n                                    if (ctrl.tagging.fct !== undefined && typeof item === 'string') {\r\n                                        item = ctrl.tagging.fct(ctrl.search);\r\n                                        if (!item) return;\r\n                                        // if item type is 'string', apply the tagging label\r\n                                    } else if (typeof item === 'string') {\r\n                                        // trim the trailing space\r\n                                        item = item.replace(ctrl.taggingLabel, '').trim();\r\n                                    }\r\n                                }\r\n                            }\r\n                            // search ctrl.selected for dupes potentially caused by tagging and return early if found\r\n                            if (ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter(function(selection) {\r\n                                    return angular.equals(selection, item);\r\n                                }).length > 0) {\r\n                                ctrl.close(skipFocusser);\r\n                                return;\r\n                            }\r\n\r\n                        }\r\n                        ctrl.searchInput.value = ctrl.selected.name;\r\n                        $scope.$broadcast('uis:select', item);\r\n\r\n                        var locals = {};\r\n                        locals[ctrl.parserResult.itemName] = item;\r\n\r\n                        $timeout(function() {\r\n                            ctrl.onSelectCallback($scope, {\r\n                                $item: item,\r\n                                $model: ctrl.parserResult.modelMapper($scope, locals)\r\n                            });\r\n                        });\r\n\r\n                        if (ctrl.closeOnSelect) {\r\n                            ctrl.close(skipFocusser);\r\n                        }\r\n                        if ($event && $event.type === 'click') {\r\n                            ctrl.clickTriggeredSelect = true;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Closes the dropdown\r\n            ctrl.close = function(skipFocusser) {\r\n                //console.log(\"close\")\r\n                if (!ctrl.open) return;\r\n                if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();\r\n                //_resetSearchInput();\r\n                ctrl.open = false;\r\n                $scope.$emit('uis:close', ctrl.search);\r\n                $scope.$broadcast('uis:close', skipFocusser);\r\n\r\n            };\r\n\r\n            ctrl.setFocus = function() {\r\n                //console.log(\"setFocus\")\r\n                if (!ctrl.focus) ctrl.focusInput[0].focus();\r\n            };\r\n\r\n            ctrl.clear = function($event) {\r\n\r\n                //console.log(\"clear\")\r\n                ctrl.select(undefined);\r\n                $event.stopPropagation();\r\n                ctrl.focusser[0].focus();\r\n            };\r\n\r\n            // Toggle dropdown\r\n            ctrl.toggle = function(e) {\r\n                //console.log(\"toggle\")\r\n                if (ctrl.open) {\r\n                    ctrl.close();\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                } else {\r\n                    ctrl.activate();\r\n                }\r\n            };\r\n\r\n            ctrl.isLocked = function(itemScope, itemIndex) {\r\n                //console.log(\"isLocked\")\r\n                var isLocked, item = ctrl.selected[itemIndex];\r\n\r\n                if (item && !angular.isUndefined(ctrl.lockChoiceExpression)) {\r\n                    isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression)); // force the boolean value\r\n                    item._uiSelectChoiceLocked = isLocked; // store this for later reference\r\n                }\r\n\r\n                return isLocked;\r\n            };\r\n\r\n            var sizeWatch = null;\r\n            ctrl.sizeSearchInput = function() {\r\n                //console.log(\"sizeSearchInput\")\r\n                var input = ctrl.searchInput[0],\r\n                    container = ctrl.searchInput.parent().parent()[0],\r\n                    calculateContainerWidth = function() {\r\n                        // Return the container width only if the search input is visible\r\n                        return container.clientWidth * !!input.offsetParent;\r\n                    },\r\n                    updateIfVisible = function(containerWidth) {\r\n                        if (containerWidth === 0) {\r\n                            return false;\r\n                        }\r\n                        var inputWidth = containerWidth - input.offsetLeft - 10;\r\n                        if (inputWidth < 50) inputWidth = containerWidth;\r\n                        ctrl.searchInput.css('width', inputWidth + 'px');\r\n                        return true;\r\n                    };\r\n\r\n                ctrl.searchInput.css('width', '10px');\r\n                $timeout(function() { //Give tags time to render correctly\r\n                    if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {\r\n                        sizeWatch = $scope.$watch(calculateContainerWidth, function(containerWidth) {\r\n                            if (updateIfVisible(containerWidth)) {\r\n                                sizeWatch();\r\n                                sizeWatch = null;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            function getCaret(el) {\r\n                if (el.selectionStart) {\r\n                    return el.selectionStart;\r\n                } else if (document.selection) {\r\n                    el.focus();\r\n\r\n                    var r = document.selection.createRange();\r\n                    if (r == null) {\r\n                        return 0;\r\n                    }\r\n\r\n                    var re = el.createTextRange(),\r\n                        rc = re.duplicate();\r\n                    re.moveToBookmark(r.getBookmark());\r\n                    rc.setEndPoint('EndToStart', re);\r\n\r\n                    return rc.text.length;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            function resetCursor(txtElement, currentPos) {\r\n                if (txtElement.setSelectionRange) {\r\n                    txtElement.focus();\r\n                    txtElement.setSelectionRange(currentPos, currentPos);\r\n                } else if (txtElement.createTextRange) {\r\n                    var range = txtElement.createTextRange();\r\n                    range.moveStart('character', currentPos);\r\n                    range.select();\r\n                }\r\n            }\r\n\r\n            function handleBackspace(ele) {\r\n                //var textarea = document.getElementById('txtArea');\r\n                var currentPos = getCaret(ele);\r\n                var text = ele.value;\r\n\r\n                var backSpace = text.substr(0, currentPos) + text.substr(ele.selectionEnd, text.length);\r\n\r\n                ele.value = backSpace;\r\n                text = ele.value;\r\n                resetCursor(ele, text.length);\r\n            }\r\n\r\n            function getSelectionText() {\r\n                var text = \"\";\r\n                if (window.getSelection) {\r\n                    text = window.getSelection().toString();\r\n                } else if (document.selection && document.selection.type != \"Control\") {\r\n                    text = document.selection.createRange().text;\r\n                }\r\n                return text;\r\n            }\r\n\r\n            function _handleDropDownSelection(key) {\r\n                var processed = true;\r\n                switch (key) {\r\n                    case KEY.DOWN:\r\n                        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode\r\n                        else if (ctrl.activeIndex < ctrl.items.length - 1) {\r\n                            ctrl.activeIndex++;\r\n                        }\r\n                        break;\r\n                    case KEY.UP:\r\n                        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode\r\n                        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) {\r\n                            ctrl.activeIndex--;\r\n                        }\r\n                        break;\r\n                    case KEY.TAB:\r\n                        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);\r\n                        break;\r\n\r\n                    case KEY.ENTER:\r\n                        if (ctrl.open && ctrl.activeIndex >= 0) {\r\n                            if (ctrl.items && ctrl.items.length > 0)\r\n                                ctrl.select(ctrl.items[ctrl.activeIndex]); // Make sure at least one dropdown item is highlighted before adding.\r\n                            else {\r\n                                if (ctrl.searchInput && ctrl.searchInput[0]) {\r\n                                    if (ctrl.searchInput[0].value !== ctrl.search) {\r\n                                        ctrl.search = ctrl.searchInput[0].value;\r\n                                    }\r\n                                }\r\n                                $scope.$emit('onEnter', ctrl.search);\r\n                            }\r\n                        } else {\r\n                            ctrl.activate(false, true); //In case its the search input in 'multiple' mode\r\n                        }\r\n                        break;\r\n                    case KEY.ESC:\r\n                        ctrl.close();\r\n                        break;\r\n                    default:\r\n                        processed = false;\r\n                }\r\n                return processed;\r\n            }\r\n\r\n            // Bind to keyboard shortcuts\r\n            ctrl.searchInput.on('keydown', function(e) {\r\n                //console.log(\"searchInput on\")\r\n                var key = e.which;\r\n\r\n                // if(~[KEY.ESC,KEY.TAB].indexOf(key)){\r\n                //   //TODO: SEGURO?\r\n                //   ctrl.close();\r\n                // }\r\n\r\n                $scope.$apply(function() {\r\n                    //console.log(\"apply\")\r\n                    var tagged = false;\r\n\r\n                    if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {\r\n                        _handleDropDownSelection(key);\r\n\r\n                        if (ctrl.taggingTokens.isActivated) {\r\n                            for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {\r\n                                if (ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode]) {\r\n                                    // make sure there is a new value to push via tagging\r\n                                    if (ctrl.search.length > 0) {\r\n                                        tagged = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (tagged) {\r\n                                $timeout(function() {\r\n                                    ctrl.searchInput.triggerHandler('tagged');\r\n                                    var newItem = ctrl.search.replace(KEY.MAP[e.keyCode], '').trim();\r\n                                    if (ctrl.tagging.fct) {\r\n                                        newItem = ctrl.tagging.fct(newItem);\r\n                                    }\r\n                                    if (newItem) ctrl.select(newItem, true);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n                if (KEY.isVerticalMovement(key) && ctrl.items.length > 0) {\r\n                    _ensureHighlightVisible();\r\n                }\r\n\r\n            });\r\n\r\n            // If tagging try to split by tokens and add items\r\n            ctrl.searchInput.on('paste', function(e) {\r\n                //console.log(\"paste\")\r\n                var data = e.originalEvent.clipboardData.getData('text/plain');\r\n                if (data && data.length > 0 && ctrl.taggingTokens.isActivated && ctrl.tagging.fct) {\r\n                    var items = data.split(ctrl.taggingTokens.tokens[0]); // split by first token only\r\n                    if (items && items.length > 0) {\r\n                        angular.forEach(items, function(item) {\r\n                            var newItem = ctrl.tagging.fct(item);\r\n                            if (newItem) {\r\n                                ctrl.select(newItem, true);\r\n                            }\r\n                        });\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            ctrl.searchInput.on('tagged', function() {\r\n                //console.log(\"searchInput.on\")\r\n                $timeout(function() {\r\n                    _resetSearchInput();\r\n                });\r\n            });\r\n\r\n            // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431\r\n            function _ensureHighlightVisible() {\r\n                //console.log(\"_ensureHighlightVisible\")\r\n                var container = $element.querySelectorAll('.ui-select-choices-content');\r\n                var choices = container.querySelectorAll('.ui-select-choices-row');\r\n                if (choices.length < 1) {\r\n                    throw uiSelectMinErr('choices', \"Expected multiple .ui-select-choices-row but got '{0}'.\", choices.length);\r\n                }\r\n\r\n                if (ctrl.activeIndex < 0) {\r\n                    return;\r\n                }\r\n\r\n                var highlighted = choices[ctrl.activeIndex];\r\n                var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;\r\n                var height = container[0].offsetHeight;\r\n\r\n                if (posY > height) {\r\n                    container[0].scrollTop += posY - height;\r\n                } else if (posY < highlighted.clientHeight) {\r\n                    if (ctrl.isGrouped && ctrl.activeIndex === 0)\r\n                        container[0].scrollTop = 0; //To make group header visible when going all the way up\r\n                    else\r\n                        container[0].scrollTop -= highlighted.clientHeight - posY;\r\n                }\r\n            }\r\n\r\n            $scope.$on('$destroy', function() {\r\n                //console.log(\"destroyn\")\r\n                ctrl.searchInput.off('keyup keydown tagged blur paste');\r\n            });\r\n\r\n        }\r\n    ]);\r\n\r\n    uis.directive('uiSelect', ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',\r\n        function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                templateUrl: function(tElement, tAttrs) {\r\n                    var theme = tAttrs.theme || uiSelectConfig.theme;\r\n                    return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');\r\n                },\r\n                replace: true,\r\n                transclude: true,\r\n                require: ['uiSelect', '^ngModel'],\r\n                scope: true,\r\n\r\n                controller: 'uiSelectCtrl',\r\n                controllerAs: '$select',\r\n                compile: function(tElement, tAttrs) {\r\n\r\n                    //Multiple or Single depending if multiple attribute presence\r\n                    if (angular.isDefined(tAttrs.multiple))\r\n                        tElement.append(\"<ui-select-multiple/>\").removeAttr('multiple');\r\n                    else\r\n                        tElement.append(\"<ui-select-single/>\");\r\n\r\n                    return function(scope, element, attrs, ctrls, transcludeFn) {\r\n\r\n                        var $select = ctrls[0];\r\n                        var ngModel = ctrls[1];\r\n\r\n                        $select.generatedId = uiSelectConfig.generateId();\r\n                        $select.baseTitle = attrs.title || 'Select box';\r\n                        $select.focusserTitle = $select.baseTitle + ' focus';\r\n                        $select.focusserId = 'focusser-' + $select.generatedId;\r\n                        $select.open = false;\r\n\r\n                        $select.closeOnSelect = function() {\r\n                            //console.log(\"closeOnSelect\")\r\n                            if (angular.isDefined(attrs.closeOnSelect)) {\r\n                                return $parse(attrs.closeOnSelect)();\r\n                            } else {\r\n                                return uiSelectConfig.closeOnSelect;\r\n                            }\r\n                        }();\r\n\r\n                        $select.onSelectCallback = $parse(attrs.onSelect);\r\n                        $select.onRemoveCallback = $parse(attrs.onRemove);\r\n\r\n                        //Set reference to ngModel from uiSelectCtrl\r\n                        $select.ngModel = ngModel;\r\n\r\n                        $select.choiceGrouped = function(group) {\r\n                            //console.log(\"choiceGrouped\")\r\n                            return $select.isGrouped && group && group.name;\r\n                        };\r\n\r\n                        element.on('blur', function() {\r\n                            //console.log(\"here\");\r\n                        });\r\n\r\n                        if (attrs.tabindex) {\r\n                            attrs.$observe('tabindex', function(value) {\r\n                                $select.focusInput.attr(\"tabindex\", value);\r\n                                element.removeAttr(\"tabindex\");\r\n                            });\r\n                        }\r\n\r\n                        scope.$watch('searchEnabled', function() {\r\n                            //console.log(\"searchEnabled\")\r\n                            var searchEnabled = scope.$eval(attrs.searchEnabled);\r\n                            $select.searchEnabled = searchEnabled !== undefined ? searchEnabled : uiSelectConfig.searchEnabled;\r\n                        });\r\n\r\n                        scope.$watch('sortable', function() {\r\n                            //console.log(\"sortable\")\r\n                            var sortable = scope.$eval(attrs.sortable);\r\n                            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;\r\n                        });\r\n\r\n                        attrs.$observe('disabled', function() {\r\n                            //console.log(\"disabled\")\r\n                            // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string\r\n                            $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;\r\n                        });\r\n\r\n                        attrs.$observe('resetSearchInput', function() {\r\n                            //console.log(\"resetSearchInput\")\r\n                            // $eval() is needed otherwise we get a string instead of a boolean\r\n                            var resetSearchInput = scope.$eval(attrs.resetSearchInput);\r\n                            $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;\r\n                        });\r\n\r\n                        attrs.$observe('tagging', function() {\r\n                            //console.log(\"tagging\")\r\n                            if (attrs.tagging !== undefined) {\r\n                                // $eval() is needed otherwise we get a string instead of a boolean\r\n                                var taggingEval = scope.$eval(attrs.tagging);\r\n                                $select.tagging = {\r\n                                    isActivated: true,\r\n                                    fct: taggingEval !== true ? taggingEval : undefined\r\n                                };\r\n                            } else {\r\n                                $select.tagging = {\r\n                                    isActivated: false,\r\n                                    fct: undefined\r\n                                };\r\n                            }\r\n                        });\r\n\r\n                        attrs.$observe('taggingLabel', function() {\r\n                            //console.log(\"taggingLabel\")\r\n                            if (attrs.tagging !== undefined) {\r\n                                // check eval for FALSE, in this case, we disable the labels\r\n                                // associated with tagging\r\n                                if (attrs.taggingLabel === 'false') {\r\n                                    $select.taggingLabel = false;\r\n                                } else {\r\n                                    $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        attrs.$observe('taggingTokens', function() {\r\n                            if (attrs.tagging !== undefined) {\r\n                                var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',', 'ENTER'];\r\n                                $select.taggingTokens = {\r\n                                    isActivated: true,\r\n                                    tokens: tokens\r\n                                };\r\n                            }\r\n                        });\r\n\r\n                        //Automatically gets focus when loaded\r\n                        if (angular.isDefined(attrs.autofocus)) {\r\n                            $timeout(function() {\r\n                                $select.setFocus();\r\n                            });\r\n                        }\r\n\r\n                        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')\r\n                        if (angular.isDefined(attrs.focusOn)) {\r\n                            scope.$on(attrs.focusOn, function() {\r\n                                $timeout(function() {\r\n                                    $select.setFocus();\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        function onDocumentClick(e) {\r\n\r\n                            if (!$select.open) {\r\n                                console.log(\"onDocumentClick\")\r\n                                return; //Skip it if dropdown is close\r\n                            }\r\n                            //Skip it if dropdown is close\r\n\r\n                            var contains = false;\r\n\r\n                            if (window.jQuery) {\r\n                                // Firefox 3.6 does not support element.contains()\r\n                                // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\r\n                                contains = window.jQuery.contains(element[0], e.target);\r\n                            } else {\r\n                                contains = element[0].contains(e.target);\r\n                            }\r\n\r\n                            if (!contains && !$select.clickTriggeredSelect) {\r\n                                //Will lose focus only with certain targets\r\n                                var focusableControls = ['input', 'button', 'textarea'];\r\n                                var targetScope = angular.element(e.target).scope(); //To check if target is other ui-select\r\n                                var skipFocusser = targetScope && targetScope.$select && targetScope.$select !== $select; //To check if target is other ui-select\r\n                                if (!skipFocusser) skipFocusser = ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea\r\n                                $select.close(skipFocusser);\r\n                                scope.$digest();\r\n                            }\r\n                            $select.clickTriggeredSelect = false;\r\n                        }\r\n\r\n                        // See Click everywhere but here event http://stackoverflow.com/questions/12931369\r\n                        $document.on('click', onDocumentClick);\r\n\r\n                        scope.$on(\"focusLost\", function() {\r\n                            //console.log(\"focus lost\");\r\n                        })\r\n\r\n                        scope.$on('$destroy', function() {\r\n                            $document.off('click', onDocumentClick);\r\n                        });\r\n\r\n                        // Move transcluded elements to their correct position in main template\r\n                        transcludeFn(scope, function(clone) {\r\n                            // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html\r\n\r\n                            // One day jqLite will be replaced by jQuery and we will be able to write:\r\n                            // var transcludedElement = clone.filter('.my-class')\r\n                            // instead of creating a hackish DOM element:\r\n                            var transcluded = angular.element('<div>').append(clone);\r\n\r\n                            var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');\r\n                            transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr\r\n                            transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes\r\n                            if (transcludedMatch.length !== 1) {\r\n                                throw uiSelectMinErr('transcluded', \"Expected 1 .ui-select-match but got '{0}'.\", transcludedMatch.length);\r\n                            }\r\n                            element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);\r\n\r\n                            var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');\r\n                            transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr\r\n                            transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes\r\n                            if (transcludedChoices.length !== 1) {\r\n                                throw uiSelectMinErr('transcluded', \"Expected 1 .ui-select-choices but got '{0}'.\", transcludedChoices.length);\r\n                            }\r\n                            element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);\r\n                        });\r\n\r\n                        // Support for appending the select field to the body when its open\r\n                        var appendToBody = scope.$eval(attrs.appendToBody);\r\n                        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {\r\n                            scope.$watch('$select.open', function(isOpen) {\r\n                                if (isOpen) {\r\n                                    positionDropdown();\r\n                                } else {\r\n                                    resetDropdown();\r\n                                }\r\n                            });\r\n\r\n                            // Move the dropdown back to its original location when the scope is destroyed. Otherwise\r\n                            // it might stick around when the user routes away or the select field is otherwise removed\r\n                            scope.$on('$destroy', function() {\r\n                                resetDropdown();\r\n                            });\r\n                        }\r\n\r\n                        // Hold on to a reference to the .ui-select-container element for appendToBody support\r\n                        var placeholder = null,\r\n                            originalWidth = '';\r\n\r\n                        function positionDropdown() {\r\n                            // Remember the absolute position of the element\r\n                            var offset = uisOffset(element);\r\n\r\n                            // Clone the element into a placeholder element to take its original place in the DOM\r\n                            placeholder = angular.element('<div class=\"ui-select-placeholder\"></div>');\r\n                            placeholder[0].style.width = offset.width + 'px';\r\n                            placeholder[0].style.height = offset.height + 'px';\r\n                            element.after(placeholder);\r\n\r\n                            // Remember the original value of the element width inline style, so it can be restored\r\n                            // when the dropdown is closed\r\n                            originalWidth = element[0].style.width;\r\n\r\n                            // Now move the actual dropdown element to the end of the body\r\n                            $document.find('body').append(element);\r\n\r\n                            element[0].style.position = 'absolute';\r\n                            element[0].style.left = offset.left + 'px';\r\n                            element[0].style.top = offset.top + 'px';\r\n                            element[0].style.width = offset.width + 'px';\r\n                        }\r\n\r\n                        function resetDropdown() {\r\n                            //console.log(\"resetDropdown\")\r\n                            if (placeholder === null) {\r\n                                // The dropdown has not actually been display yet, so there's nothing to reset\r\n                                return;\r\n                            }\r\n\r\n                            // Move the dropdown element back to its original location in the DOM\r\n                            placeholder.replaceWith(element);\r\n                            placeholder = null;\r\n\r\n                            element[0].style.position = '';\r\n                            element[0].style.left = '';\r\n                            element[0].style.top = '';\r\n                            element[0].style.width = originalWidth;\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        }\r\n    ]);\r\n\r\n    uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: '^uiSelect',\r\n            replace: true,\r\n            transclude: true,\r\n            templateUrl: function(tElement) {\r\n                // Gets theme attribute from parent (ui-select)\r\n                var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;\r\n                var multi = tElement.parent().attr('multiple');\r\n                return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');\r\n            },\r\n            link: function(scope, element, attrs, $select) {\r\n                $select.lockChoiceExpression = attrs.uiLockChoice;\r\n                attrs.$observe('placeholder', function(placeholder) {\r\n                    $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;\r\n                });\r\n\r\n                function setAllowClear(allow) {\r\n                    $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;\r\n                }\r\n\r\n                attrs.$observe('allowClear', setAllowClear);\r\n                setAllowClear(attrs.allowClear);\r\n\r\n                if ($select.multiple) {\r\n                    $select.sizeSearchInput();\r\n                }\r\n\r\n            }\r\n        };\r\n    }]);\r\n\r\n    uis.directive('uiSelectMultiple', ['uiSelectMinErr', '$timeout', function(uiSelectMinErr, $timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: ['^uiSelect', '^ngModel'],\r\n\r\n            controller: ['$scope', '$timeout', function($scope, $timeout) {\r\n\r\n                var ctrl = this,\r\n                    $select = $scope.$select,\r\n                    ngModel;\r\n\r\n                //Wait for link fn to inject it \r\n                $scope.$evalAsync(function() {\r\n                    ngModel = $scope.ngModel;\r\n                });\r\n\r\n                ctrl.activeMatchIndex = -1;\r\n\r\n                ctrl.updateModel = function() {\r\n                    //console.log(\"updateModel\")\r\n                    ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes\r\n                    ctrl.refreshComponent();\r\n                };\r\n\r\n                ctrl.refreshComponent = function() {\r\n                    //console.log(\"refreshComponent\")\r\n                    //Remove already selected items\r\n                    //e.g. When user clicks on a selection, the selected array changes and \r\n                    //the dropdown should remove that item\r\n                    $select.refreshItems();\r\n                    $select.sizeSearchInput();\r\n                };\r\n\r\n                // Remove item from multiple select\r\n                ctrl.removeChoice = function(index) {\r\n                    //console.log(\"removeChoice\")\r\n                    var removedChoice = $select.selected[index];\r\n\r\n                    // if the choice is locked, can't remove it\r\n                    if (removedChoice && removedChoice._uiSelectChoiceLocked) return;\r\n\r\n                    var locals = {};\r\n                    locals[$select.parserResult.itemName] = removedChoice;\r\n\r\n                    $select.selected.splice(index, 1);\r\n                    ctrl.activeMatchIndex = -1;\r\n                    $select.sizeSearchInput();\r\n\r\n                    // Give some time for scope propagation.\r\n                    $timeout(function() {\r\n                        $select.onRemoveCallback($scope, {\r\n                            $item: removedChoice,\r\n                            $model: $select.parserResult.modelMapper($scope, locals)\r\n                        });\r\n                    });\r\n\r\n                    ctrl.updateModel();\r\n\r\n                };\r\n\r\n                ctrl.getPlaceholder = function() {\r\n                    //console.log(\"getPlaceholder\")\r\n                    //Refactor single?\r\n                    if ($select.selected.length) return;\r\n                    return $select.placeholder;\r\n                };\r\n\r\n\r\n            }],\r\n            controllerAs: '$selectMultiple',\r\n\r\n            link: function(scope, element, attrs, ctrls) {\r\n\r\n                var $select = ctrls[0];\r\n                var ngModel = scope.ngModel = ctrls[1];\r\n                var $selectMultiple = scope.$selectMultiple;\r\n\r\n                //$select.selected = raw selected objects (ignoring any property binding)\r\n\r\n                $select.multiple = true;\r\n                $select.removeSelected = false;\r\n\r\n                //Input that will handle focus\r\n                $select.focusInput = $select.searchInput;\r\n\r\n                //From view --> model\r\n                ngModel.$parsers.unshift(function() {\r\n\r\n                    //console.log(\"parsers\")\r\n                    var locals = {},\r\n                        result,\r\n                        resultMultiple = [];\r\n                    for (var j = $select.selected.length - 1; j >= 0; j--) {\r\n                        locals = {};\r\n                        locals[$select.parserResult.itemName] = $select.selected[j];\r\n                        result = $select.parserResult.modelMapper(scope, locals);\r\n                        resultMultiple.unshift(result);\r\n                    }\r\n                    return resultMultiple;\r\n                });\r\n\r\n                // From model --> view\r\n                ngModel.$formatters.unshift(function(inputValue) {\r\n                    //console.log(\"formatters\")\r\n                    var data = $select.parserResult.source(scope, {\r\n                            $select: {\r\n                                search: ''\r\n                            }\r\n                        }), //Overwrite $search\r\n                        locals = {},\r\n                        result;\r\n                    if (!data) return inputValue;\r\n                    var resultMultiple = [];\r\n                    var checkFnMultiple = function(list, value) {\r\n                        if (!list || !list.length) return;\r\n                        for (var p = list.length - 1; p >= 0; p--) {\r\n                            locals[$select.parserResult.itemName] = list[p];\r\n                            result = $select.parserResult.modelMapper(scope, locals);\r\n                            if ($select.parserResult.trackByExp) {\r\n                                var matches = /\\.(.+)/.exec($select.parserResult.trackByExp);\r\n                                if (matches.length > 0 && result[matches[1]] == value[matches[1]]) {\r\n                                    resultMultiple.unshift(list[p]);\r\n                                    return true;\r\n                                }\r\n                            }\r\n                            if (angular.equals(result, value)) {\r\n                                resultMultiple.unshift(list[p]);\r\n                                return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    };\r\n                    if (!inputValue) return resultMultiple; //If ngModel was undefined\r\n                    for (var k = inputValue.length - 1; k >= 0; k--) {\r\n                        //Check model array of currently selected items \r\n                        if (!checkFnMultiple($select.selected, inputValue[k])) {\r\n                            //Check model array of all items available\r\n                            if (!checkFnMultiple(data, inputValue[k])) {\r\n                                //If not found on previous lists, just add it directly to resultMultiple\r\n                                resultMultiple.unshift(inputValue[k]);\r\n                            }\r\n                        }\r\n                    }\r\n                    return resultMultiple;\r\n                });\r\n\r\n                //Watch for external model changes \r\n                scope.$watchCollection(function() {\r\n                    return ngModel.$modelValue;\r\n                }, function(newValue, oldValue) {\r\n                    if (oldValue != newValue) {\r\n                        ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters\r\n                        $selectMultiple.refreshComponent();\r\n                    }\r\n                });\r\n\r\n                ngModel.$render = function() {\r\n                    //console.log(\"render\")\r\n                    // Make sure that model value is array\r\n                    if (!angular.isArray(ngModel.$viewValue)) {\r\n                        // Have tolerance for null or undefined values\r\n                        if (angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null) {\r\n                            $select.selected = [];\r\n                        } else {\r\n                            throw uiSelectMinErr('multiarr', \"Expected model value to be array but got '{0}'\", ngModel.$viewValue);\r\n                        }\r\n                    }\r\n                    $select.selected = ngModel.$viewValue;\r\n                    scope.$evalAsync(); //To force $digest\r\n                };\r\n\r\n                scope.$on('uis:select', function(event, item) {\r\n                    //console.log(\"uis:select\")\r\n                    $select.selected.push(item);\r\n                    $selectMultiple.updateModel();\r\n                });\r\n\r\n                scope.$on('uis:activate', function() {\r\n                    console.log(\"uis:activate\")\r\n                    if ($select && $select.searchInput && $select.searchInput[0]) {\r\n                        $select.search = $select.searchInput[0].value;\r\n                    }\r\n                    $selectMultiple.activeMatchIndex = -1;\r\n                });\r\n\r\n                scope.$watch('$select.disabled', function(newValue, oldValue) {\r\n                    //console.log(\"uis:disabled\")\r\n                    // As the search input field may now become visible, it may be necessary to recompute its size\r\n                    if (oldValue && !newValue) $select.sizeSearchInput();\r\n                });\r\n\r\n\r\n\r\n\r\n                $select.searchInput.on('keydown', function(e) {\r\n                    var key = e.which;\r\n                    scope.$apply(function() {\r\n                        var processed = false;\r\n                        // var tagged = false; //Checkme\r\n                        if (KEY.isHorizontalMovement(key)) {\r\n                            processed = _handleMatchSelection(key);\r\n                        }\r\n                        if (processed && key != KEY.TAB) {\r\n                            //TODO Check si el tab selecciona aun correctamente\r\n                            //Crear test\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function _getCaretPosition(el) {\r\n                        //console.log(\"_getCaretPosition\")\r\n                        if (angular.isNumber(el.selectionStart)) return el.selectionStart;\r\n                        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise\r\n                        else return el.value.length;\r\n                    }\r\n                    // Handles selected options in \"multiple\" mode\r\n                function _handleMatchSelection(key) {\r\n                    var caretPosition = _getCaretPosition($select.searchInput[0]),\r\n                        length = $select.selected.length,\r\n                        // none  = -1,\r\n                        first = 0,\r\n                        last = length - 1,\r\n                        curr = $selectMultiple.activeMatchIndex,\r\n                        next = $selectMultiple.activeMatchIndex + 1,\r\n                        prev = $selectMultiple.activeMatchIndex - 1,\r\n                        newIndex = curr;\r\n\r\n                    if (caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;\r\n\r\n                    $select.close();\r\n\r\n                    function getNewActiveMatchIndex() {\r\n                        //console.log(\"getNewActiveMatchIndex\")\r\n                        switch (key) {\r\n                            case KEY.LEFT:\r\n                                // Select previous/first item\r\n                                if (~$selectMultiple.activeMatchIndex) return prev;\r\n                                // Select last item\r\n                                else return last;\r\n                                break;\r\n                            case KEY.RIGHT:\r\n                                // Open drop-down\r\n                                if (!~$selectMultiple.activeMatchIndex || curr === last) {\r\n                                    $select.activate();\r\n                                    return false;\r\n                                }\r\n                                // Select next/last item\r\n                                else return next;\r\n                                break;\r\n                                /*case KEY.BACKSPACE:\r\n                                  // Remove selected item and select previous/first\r\n                                  if(~$selectMultiple.activeMatchIndex){\r\n                                    $selectMultiple.removeChoice(curr);\r\n                                    return prev;\r\n                                  }\r\n                                  // Select last item\r\n                                  else return last;\r\n                                  break;*/\r\n                            case KEY.DELETE:\r\n                                // Remove selected item and select next item\r\n                                if (~$selectMultiple.activeMatchIndex) {\r\n                                    $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);\r\n                                    return curr;\r\n                                } else return false;\r\n                        }\r\n                    }\r\n\r\n                    newIndex = getNewActiveMatchIndex();\r\n\r\n                    if (!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;\r\n                    else $selectMultiple.activeMatchIndex = Math.min(last, Math.max(first, newIndex));\r\n\r\n                    return true;\r\n                }\r\n\r\n                $select.searchInput.on('keyup', function(e) {\r\n                    //console.log(\"searchInput.on\")\r\n                    if (!KEY.isVerticalMovement(e.which)) {\r\n                        scope.$evalAsync(function() {\r\n                            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;\r\n                        });\r\n                    }\r\n                    // Push a \"create new\" item into array if there is a search string\r\n                    if ($select.tagging.isActivated && $select.search.length > 0) {\r\n\r\n                        // return early with these keys\r\n                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which)) {\r\n                            return;\r\n                        }\r\n                        // always reset the activeIndex to the first item when tagging\r\n                        $select.activeIndex = $select.taggingLabel === false ? -1 : 0;\r\n                        // taggingLabel === false bypasses all of this\r\n                        if ($select.taggingLabel === false) return;\r\n\r\n                        var items = angular.copy($select.items);\r\n                        var stashArr = angular.copy($select.items);\r\n                        var newItem;\r\n                        var item;\r\n                        var hasTag = false;\r\n                        var dupeIndex = -1;\r\n                        var tagItems;\r\n                        var tagItem;\r\n\r\n                        // case for object tagging via transform `$select.tagging.fct` function\r\n                        if ($select.tagging.fct !== undefined) {\r\n                            tagItems = $select.$filter('filter')(items, {\r\n                                'isTag': true\r\n                            });\r\n                            if (tagItems.length > 0) {\r\n                                tagItem = tagItems[0];\r\n                            }\r\n                            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous\r\n                            if (items.length > 0 && tagItem) {\r\n                                hasTag = true;\r\n                                items = items.slice(1, items.length);\r\n                                stashArr = stashArr.slice(1, stashArr.length);\r\n                            }\r\n                            newItem = $select.tagging.fct($select.search);\r\n                            newItem.isTag = true;\r\n                            // verify the the tag doesn't match the value of an existing item\r\n                            if (stashArr.filter(function(origItem) {\r\n                                    return angular.equals(origItem, $select.tagging.fct($select.search));\r\n                                }).length > 0) {\r\n                                return;\r\n                            }\r\n                            newItem.isTag = true;\r\n                            // handle newItem string and stripping dupes in tagging string context\r\n                        } else {\r\n                            // find any tagging items already in the $select.items array and store them\r\n                            tagItems = $select.$filter('filter')(items, function(item) {\r\n                                if (item) {\r\n                                    if (typeof(item) === \"string\")\r\n                                        return item.match($select.taggingLabel);\r\n                                    else if (typeof(item) === \"object\") {\r\n                                        item.text.match($select.taggingLabel)\r\n                                    }\r\n                                }\r\n                            });\r\n                            if (tagItems.length > 0) {\r\n                                tagItem = tagItems[0];\r\n                            }\r\n                            if (items && items[0] !== \"\")\r\n                                item = items[0];\r\n                            else\r\n                                item = undefined;\r\n                            // remove existing tag item if found (should only ever be one tag item)\r\n                            if (item !== undefined && items.length > 0 && tagItem) {\r\n                                hasTag = true;\r\n                                items = items.slice(1, items.length);\r\n                                stashArr = stashArr.slice(1, stashArr.length);\r\n                            }\r\n                            newItem = $select.search + ' ' + $select.taggingLabel;\r\n                            if (_findApproxDupe($select.selected, $select.search) > -1) {\r\n                                return;\r\n                            }\r\n                            // verify the the tag doesn't match the value of an existing item from\r\n                            // the searched data set or the items already selected\r\n                            if (_findCaseInsensitiveDupe(stashArr.concat($select.selected))) {\r\n                                // if there is a tag from prev iteration, strip it / queue the change\r\n                                // and return early\r\n                                if (hasTag) {\r\n                                    items = stashArr;\r\n                                    scope.$evalAsync(function() {\r\n                                        $select.activeIndex = 0;\r\n                                        $select.items = items;\r\n                                    });\r\n                                }\r\n                                return;\r\n                            }\r\n                            if (_findCaseInsensitiveDupe(stashArr)) {\r\n                                // if there is a tag from prev iteration, strip it\r\n                                if (hasTag) {\r\n                                    $select.items = stashArr.slice(1, stashArr.length);\r\n                                }\r\n                                return;\r\n                            }\r\n                        }\r\n                        if (hasTag) dupeIndex = _findApproxDupe($select.selected, newItem);\r\n                        // dupe found, shave the first item\r\n                        if (dupeIndex > -1) {\r\n                            items = items.slice(dupeIndex + 1, items.length - 1);\r\n                        } else {\r\n                            items = [];\r\n                            // items.push(newItem);\r\n                            items = items.concat(stashArr);\r\n                        }\r\n                        scope.$evalAsync(function() {\r\n                            $select.activeIndex = 0;\r\n                            $select.items = items;\r\n                        });\r\n                    }\r\n                });\r\n\r\n                function _findCaseInsensitiveDupe(arr) {\r\n                    return false;\r\n                    if (arr === undefined || $select.search === undefined) {\r\n                        return false;\r\n                    }\r\n                    var hasDupe = arr.filter(function(origItem) {\r\n                        if ($select.search.toUpperCase() === undefined || origItem === undefined) {\r\n                            return false;\r\n                        }\r\n                        return origItem.toUpperCase() === $select.search.toUpperCase();\r\n                    }).length > 0;\r\n\r\n                    return hasDupe;\r\n                }\r\n\r\n                function _findApproxDupe(haystack, needle) {\r\n                    var dupeIndex = -1;\r\n                    if (angular.isArray(haystack)) {\r\n                        var tempArr = angular.copy(haystack);\r\n                        for (var i = 0; i < tempArr.length; i++) {\r\n                            // handle the simple string version of tagging\r\n                            if ($select.tagging.fct === undefined) {\r\n                                // search the array for the match\r\n                                if (tempArr[i] + ' ' + $select.taggingLabel === needle) {\r\n                                    dupeIndex = i;\r\n                                }\r\n                                // handle the object tagging implementation\r\n                            } else {\r\n                                var mockObj = tempArr[i];\r\n                                mockObj.isTag = true;\r\n                                if (angular.equals(mockObj, needle)) {\r\n                                    dupeIndex = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return dupeIndex;\r\n                }\r\n\r\n                $select.searchInput.on('blur', function() {\r\n                    $timeout(function() {\r\n                        $selectMultiple.activeMatchIndex = -1;\r\n                        if (!$select.open) {\r\n                            if ($select.searchInput && $select.searchInput[0]) {\r\n                                if ($select.searchInput[0].value !== $select.search)\r\n                                    $select.search = $select.searchInput[0].value;\r\n                                scope.$emit('focuslost', $select.search);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n\r\n            }\r\n        };\r\n    }]);\r\n    uis.directive('uiSelectSingle', ['$timeout', '$compile', function($timeout, $compile) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: ['^uiSelect', '^ngModel'],\r\n            link: function(scope, element, attrs, ctrls) {\r\n\r\n                var $select = ctrls[0];\r\n                var ngModel = ctrls[1];\r\n\r\n                element.on('blur', function() {\r\n                    //console.log(\"Blur\");\r\n                });\r\n\r\n                //From view --> model\r\n                ngModel.$parsers.unshift(function(inputValue) {\r\n                    var locals = {},\r\n                        result;\r\n                    locals[$select.parserResult.itemName] = inputValue;\r\n                    result = $select.parserResult.modelMapper(scope, locals);\r\n                    return result;\r\n                });\r\n\r\n                //From model --> view\r\n                ngModel.$formatters.unshift(function(inputValue) {\r\n                    var data = $select.parserResult.source(scope, {\r\n                            $select: {\r\n                                search: ''\r\n                            }\r\n                        }), //Overwrite $search\r\n                        locals = {},\r\n                        result;\r\n                    if (data) {\r\n                        var checkFnSingle = function(d) {\r\n                            locals[$select.parserResult.itemName] = d;\r\n                            result = $select.parserResult.modelMapper(scope, locals);\r\n                            return result == inputValue;\r\n                        };\r\n                        //If possible pass same object stored in $select.selected\r\n                        if ($select.selected && checkFnSingle($select.selected)) {\r\n                            return $select.selected;\r\n                        }\r\n                        for (var i = data.length - 1; i >= 0; i--) {\r\n                            if (checkFnSingle(data[i])) return data[i];\r\n                        }\r\n                    }\r\n                    return inputValue;\r\n                });\r\n\r\n                //Update viewValue if model change\r\n                scope.$watch('$select.selected', function(newValue) {\r\n                    if (ngModel.$viewValue !== newValue) {\r\n                        ngModel.$setViewValue(newValue);\r\n                    }\r\n                });\r\n\r\n                ngModel.$render = function() {\r\n                    $select.selected = ngModel.$viewValue;\r\n                };\r\n\r\n                scope.$on('uis:select', function(event, item) {\r\n                    $select.selected = item;\r\n                });\r\n\r\n                scope.$on('uis:close', function(event, skipFocusser) {\r\n                    $timeout(function() {\r\n                        $select.focusser.prop('disabled', false);\r\n                        if (!skipFocusser) $select.focusser[0].focus();\r\n                    }, 0, false);\r\n                });\r\n\r\n                scope.$on('uis:activate', function() {\r\n                    focusser.prop('disabled', true); //Will reactivate it on .close()\r\n                });\r\n\r\n                //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954\r\n                var focusser = angular.element(\"<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />\");\r\n                $compile(focusser)(scope);\r\n                $select.focusser = focusser;\r\n\r\n                //Input that will handle focus\r\n                $select.focusInput = focusser;\r\n\r\n                element.parent().append(focusser);\r\n                focusser.bind(\"focus\", function() {\r\n                    scope.$evalAsync(function() {\r\n                        $select.focus = true;\r\n                    });\r\n                });\r\n                focusser.bind(\"blur\", function() {\r\n                    scope.$evalAsync(function() {\r\n                        $select.focus = false;\r\n                    });\r\n                });\r\n                focusser.bind(\"keydown\", function(e) {\r\n\r\n                    if (e.which === KEY.BACKSPACE) {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        $select.select(undefined);\r\n                        scope.$apply();\r\n                        return;\r\n                    }\r\n\r\n                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {\r\n                        return;\r\n                    }\r\n\r\n                    if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE) {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        $select.activate();\r\n                    }\r\n\r\n                    scope.$digest();\r\n                });\r\n\r\n                focusser.bind(\"keyup input\", function(e) {\r\n\r\n                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {\r\n                        return;\r\n                    }\r\n\r\n                    $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input\r\n                    focusser.val('');\r\n                    scope.$digest();\r\n\r\n                });\r\n\r\n\r\n            }\r\n        };\r\n    }]);\r\n    // Make multiple matches sortable\r\n    uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {\r\n        return {\r\n            require: '^uiSelect',\r\n            link: function(scope, element, attrs, $select) {\r\n                if (scope[attrs.uiSelectSort] === null) {\r\n                    throw uiSelectMinErr('sort', \"Expected a list to sort\");\r\n                }\r\n\r\n\r\n                var options = angular.extend({\r\n                        axis: 'horizontal'\r\n                    },\r\n                    scope.$eval(attrs.uiSelectSortOptions));\r\n\r\n                var axis = options.axis,\r\n                    draggingClassName = 'dragging',\r\n                    droppingClassName = 'dropping',\r\n                    droppingBeforeClassName = 'dropping-before',\r\n                    droppingAfterClassName = 'dropping-after';\r\n\r\n                scope.$watch(function() {\r\n                    return $select.sortable;\r\n                }, function(n) {\r\n                    if (n) {\r\n                        element.attr('draggable', true);\r\n                    } else {\r\n                        element.removeAttr('draggable');\r\n                    }\r\n                });\r\n\r\n                element.on('dragstart', function(e) {\r\n                    element.addClass(draggingClassName);\r\n\r\n                    (e.dataTransfer || e.originalEvent.dataTransfer).setData('text/plain', scope.$index);\r\n                });\r\n\r\n                element.on('dragend', function() {\r\n                    element.removeClass(draggingClassName);\r\n                });\r\n\r\n                var move = function(from, to) {\r\n                    /*jshint validthis: true */\r\n                    this.splice(to, 0, this.splice(from, 1)[0]);\r\n                };\r\n\r\n                var dragOverHandler = function(e) {\r\n                    e.preventDefault();\r\n\r\n                    var offset = axis === 'vertical' ? e.offsetY || e.layerY || (e.originalEvent ? e.originalEvent.offsetY : 0) : e.offsetX || e.layerX || (e.originalEvent ? e.originalEvent.offsetX : 0);\r\n\r\n                    if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {\r\n                        element.removeClass(droppingAfterClassName);\r\n                        element.addClass(droppingBeforeClassName);\r\n\r\n                    } else {\r\n                        element.removeClass(droppingBeforeClassName);\r\n                        element.addClass(droppingAfterClassName);\r\n                    }\r\n                };\r\n\r\n                var dropTimeout;\r\n\r\n                var dropHandler = function(e) {\r\n                    e.preventDefault();\r\n\r\n                    var droppedItemIndex = parseInt((e.dataTransfer || e.originalEvent.dataTransfer).getData('text/plain'), 10);\r\n\r\n                    // prevent event firing multiple times in firefox\r\n                    $timeout.cancel(dropTimeout);\r\n                    dropTimeout = $timeout(function() {\r\n                        _dropHandler(droppedItemIndex);\r\n                    }, 20);\r\n                };\r\n\r\n                var _dropHandler = function(droppedItemIndex) {\r\n                    var theList = scope.$eval(attrs.uiSelectSort),\r\n                        itemToMove = theList[droppedItemIndex],\r\n                        newIndex = null;\r\n\r\n                    if (element.hasClass(droppingBeforeClassName)) {\r\n                        if (droppedItemIndex < scope.$index) {\r\n                            newIndex = scope.$index - 1;\r\n                        } else {\r\n                            newIndex = scope.$index;\r\n                        }\r\n                    } else {\r\n                        if (droppedItemIndex < scope.$index) {\r\n                            newIndex = scope.$index;\r\n                        } else {\r\n                            newIndex = scope.$index + 1;\r\n                        }\r\n                    }\r\n\r\n                    move.apply(theList, [droppedItemIndex, newIndex]);\r\n\r\n                    scope.$apply(function() {\r\n                        scope.$emit('uiSelectSort:change', {\r\n                            array: theList,\r\n                            item: itemToMove,\r\n                            from: droppedItemIndex,\r\n                            to: newIndex\r\n                        });\r\n                    });\r\n\r\n                    element.removeClass(droppingClassName);\r\n                    element.removeClass(droppingBeforeClassName);\r\n                    element.removeClass(droppingAfterClassName);\r\n\r\n                    element.off('drop', dropHandler);\r\n                };\r\n\r\n                element.on('dragenter', function() {\r\n                    if (element.hasClass(draggingClassName)) {\r\n                        return;\r\n                    }\r\n\r\n                    element.addClass(droppingClassName);\r\n\r\n                    element.on('dragover', dragOverHandler);\r\n                    element.on('drop', dropHandler);\r\n                });\r\n\r\n                element.on('dragleave', function(e) {\r\n                    if (e.target != element) {\r\n                        return;\r\n                    }\r\n                    element.removeClass(droppingClassName);\r\n                    element.removeClass(droppingBeforeClassName);\r\n                    element.removeClass(droppingAfterClassName);\r\n\r\n                    element.off('dragover', dragOverHandler);\r\n                    element.off('drop', dropHandler);\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    /**\r\n     * Parses \"repeat\" attribute.\r\n     *\r\n     * Taken from AngularJS ngRepeat source code\r\n     * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211\r\n     *\r\n     * Original discussion about parsing \"repeat\" attribute instead of fully relying on ng-repeat:\r\n     * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697\r\n     */\r\n\r\n    uis.service('uisRepeatParser', ['uiSelectMinErr', '$parse', function(uiSelectMinErr, $parse) {\r\n        var self = this;\r\n\r\n        /**\r\n         * Example:\r\n         * expression = \"address in addresses | filter: {street: $select.search} track by $index\"\r\n         * itemName = \"address\",\r\n         * source = \"addresses | filter: {street: $select.search}\",\r\n         * trackByExp = \"$index\",\r\n         */\r\n        self.parse = function(expression) {\r\n\r\n            var match = expression.match(/^\\s*(?:([\\s\\S]+?)\\s+as\\s+)?([\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\r\n\r\n            if (!match) {\r\n                throw uiSelectMinErr('iexp', \"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.\",\r\n                    expression);\r\n            }\r\n\r\n            return {\r\n                itemName: match[2], // (lhs) Left-hand side,\r\n                source: $parse(match[3]),\r\n                trackByExp: match[4],\r\n                modelMapper: $parse(match[1] || match[2])\r\n            };\r\n\r\n        };\r\n\r\n        self.getGroupNgRepeatExpression = function() {\r\n            return '$group in $select.groups';\r\n        };\r\n\r\n        self.getNgRepeatExpression = function(itemName, source, trackByExp, grouped) {\r\n            var expression = itemName + ' in ' + (grouped ? '$group.items' : source);\r\n            if (trackByExp) {\r\n                expression += ' track by ' + trackByExp;\r\n            }\r\n            return expression;\r\n        };\r\n    }]);\r\n\r\n}());\r\nangular.module(\"ui.select\").run([\"$templateCache\", function($templateCache) {\r\n    $templateCache.put(\"bootstrap/choices.tpl.html\", \"<ul class=\\\"ui-select-choices ui-select-choices-content dropdown-menu\\\" role=\\\"listbox\\\" ng-show=\\\"$select.items.length > 0\\\"><li class=\\\"ui-select-choices-group\\\" id=\\\"ui-select-choices-{{ $select.generatedId }}\\\"><div class=\\\"divider\\\" ng-show=\\\"$select.isGrouped && $index > 0\\\"></div><div ng-show=\\\"$select.isGrouped\\\" class=\\\"ui-select-choices-group-label dropdown-header\\\" ng-bind=\\\"$group.name\\\"></div><div id=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\\\" role=\\\"option\\\"><a href=\\\"javascript:void(0)\\\" class=\\\"ui-select-choices-row-inner\\\"></a></div></li></ul>\");\r\n    $templateCache.put(\"bootstrap/match-multiple.tpl.html\", \"<span class=\\\"ui-select-match\\\"><span ng-repeat=\\\"$item in $select.selected track by $index\\\"><span class=\\\"ui-select-match-item btn btn-default btn-xs\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" ng-disabled=\\\"$select.disabled\\\" ng-click=\\\"$selectMultiple.activeMatchIndex = $index;\\\" ng-class=\\\"{\\'btn-primary\\':$selectMultiple.activeMatchIndex === $index, \\'select-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span class=\\\"close ui-select-match-close\\\" ng-hide=\\\"$select.disabled\\\" ng-click=\\\"$selectMultiple.removeChoice($index)\\\">&nbsp;&times;</span> <span uis-transclude-append=\\\"\\\"></span></span></span></span>\");\r\n    $templateCache.put(\"bootstrap/match.tpl.html\", \"<div class=\\\"ui-select-match\\\" ng-hide=\\\"$select.open\\\" ng-disabled=\\\"$select.disabled\\\" ng-class=\\\"{\\'btn-default-focus\\':$select.focus}\\\"><span tabindex=\\\"-1\\\" class=\\\"btn btn-default form-control ui-select-toggle\\\" aria-label=\\\"{{ $select.baseTitle }} activate\\\" ng-disabled=\\\"$select.disabled\\\" ng-click=\\\"$select.activate()\\\" style=\\\"outline: 0;\\\"><span ng-show=\\\"$select.isEmpty()\\\" class=\\\"ui-select-placeholder text-muted\\\">{{$select.placeholder}}</span> <span ng-hide=\\\"$select.isEmpty()\\\" class=\\\"ui-select-match-text pull-left\\\" ng-class=\\\"{\\'ui-select-allow-clear\\': $select.allowClear && !$select.isEmpty()}\\\" ng-transclude=\\\"\\\"></span> <i class=\\\"caret pull-right\\\" ng-click=\\\"$select.toggle($event)\\\"></i> <a ng-show=\\\"$select.allowClear && !$select.isEmpty()\\\" aria-label=\\\"{{ $select.baseTitle }} clear\\\" style=\\\"margin-right: 10px\\\" ng-click=\\\"$select.clear($event)\\\" class=\\\"btn btn-xs btn-link pull-right\\\"><i class=\\\"glyphicon glyphicon-remove\\\" aria-hidden=\\\"true\\\"></i></a></span></div>\");\r\n    $templateCache.put(\"bootstrap/select-multiple.tpl.html\", \"<div class=\\\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\\\" ng-class=\\\"{open: $select.open}\\\"><div><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" class=\\\"ui-select-search input-xs\\\" placeholder=\\\"{{$selectMultiple.getPlaceholder()}}\\\" ng-disabled=\\\"$select.disabled\\\" ng-hide=\\\"$select.disabled\\\" ng-click=\\\"$select.activate()\\\" ng-model=\\\"$select.search\\\" role=\\\"combobox\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" ondrop=\\\"return false;\\\"></div><div class=\\\"ui-select-choices\\\"></div></div>\");\r\n    $templateCache.put(\"bootstrap/select.tpl.html\", \"<div class=\\\"ui-select-container ui-select-bootstrap dropdown\\\" ng-class=\\\"{open: $select.open}\\\"><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" tabindex=\\\"-1\\\" aria-expanded=\\\"true\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"form-control ui-select-search\\\" placeholder=\\\"{{$select.placeholder}}\\\" ng-model=\\\"$select.search\\\" ng-show=\\\"$select.searchEnabled && $select.open\\\"><div class=\\\"ui-select-choices\\\"></div></div>\");\r\n    $templateCache.put(\"select2/choices.tpl.html\", \"<ul class=\\\"ui-select-choices ui-select-choices-content select2-results\\\"><li class=\\\"ui-select-choices-group\\\" ng-class=\\\"{\\'select2-result-with-children\\': $select.choiceGrouped($group) }\\\"><div ng-show=\\\"$select.choiceGrouped($group)\\\" class=\\\"ui-select-choices-group-label select2-result-label\\\" ng-bind=\\\"$group.name\\\"></div><ul role=\\\"listbox\\\" id=\\\"ui-select-choices-{{ $select.generatedId }}\\\" ng-class=\\\"{\\'select2-result-sub\\': $select.choiceGrouped($group), \\'select2-result-single\\': !$select.choiceGrouped($group) }\\\"><li role=\\\"option\\\" id=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{\\'select2-highlighted\\': $select.isActive(this), \\'select2-disabled\\': $select.isDisabled(this)}\\\"><div class=\\\"select2-result-label ui-select-choices-row-inner\\\"></div></li></ul></li></ul>\");\r\n    $templateCache.put(\"select2/match-multiple.tpl.html\", \"<span class=\\\"ui-select-match\\\"><li ng-repeat=\\\"$item in $select.selected track by $index\\\" ng-class=\\\"{\\'select2-search-choice-focus\\':$selectMultiple.activeMatchIndex === $index, \\'select2-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span uis-transclude-append=\\\"\\\"></span> </li></span>\");\r\n    //$templateCache.put(\"select2/match-multiple.tpl.html\",\"<span class=\\\"ui-select-match\\\"><li class=\\\"ui-select-match-item select2-search-choice\\\" ng-repeat=\\\"$item in $select.selected\\\" ng-class=\\\"{\\'select2-search-choice-focus\\':$selectMultiple.activeMatchIndex === $index, \\'select2-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span uis-transclude-append=\\\"\\\"></span> <a href=\\\"javascript:;\\\" class=\\\"ui-select-match-close select2-search-choice-close\\\" ng-click=\\\"$selectMultiple.removeChoice($index)\\\" tabindex=\\\"-1\\\"></a></li></span>\");\r\n    $templateCache.put(\"select2/match.tpl.html\", \"<a class=\\\"select2-choice ui-select-match\\\" ng-class=\\\"{\\'select2-default\\': $select.isEmpty()}\\\" ng-click=\\\"$select.toggle($event)\\\" aria-label=\\\"{{ $select.baseTitle }} select\\\"><span ng-show=\\\"$select.isEmpty()\\\" class=\\\"select2-chosen\\\">{{$select.placeholder}}</span> <span ng-hide=\\\"$select.isEmpty()\\\" class=\\\"select2-chosen\\\" ng-transclude=\\\"\\\"></span> <abbr ng-if=\\\"$select.allowClear && !$select.isEmpty()\\\" class=\\\"select2-search-choice-close\\\" ng-click=\\\"$select.clear($event)\\\"></abbr> <span class=\\\"select2-arrow ui-select-toggle\\\"><b></b></span></a>\");\r\n    $templateCache.put(\"select2/select-multiple.tpl.html\", \"<div class=\\\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\\\" ng-class=\\\"{\\'select2-container-active select2-dropdown-open open\\': $select.open, \\'select2-container-disabled\\': $select.disabled}\\\"><ul class=\\\"select2-choices\\\"><span class=\\\"ui-select-match\\\"></span><li class=\\\"select2-search-field\\\"><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" role=\\\"combobox\\\" aria-expanded=\\\"true\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"select2-input ui-select-search\\\" placeholder=\\\"{{$selectMultiple.getPlaceholder()}}\\\" ng-disabled=\\\"$select.disabled\\\" ng-hide=\\\"$select.disabled\\\" ng-model=\\\"$select.search\\\" ng-click=\\\"$select.activate()\\\" style=\\\"width: 34px;\\\" ondrop=\\\"return false;\\\"></li></ul><div class=\\\"select2-drop select2-with-searchbox select2-drop-active\\\" ng-class=\\\"{\\'select2-display-none\\': !$select.open}\\\"><div class=\\\"ui-select-choices\\\"></div></div></div>\");\r\n    $templateCache.put(\"select2/select.tpl.html\", \"<div class=\\\"ui-select-container select2 select2-container\\\" ng-class=\\\"{\\'select2-container-active select2-dropdown-open open\\': $select.open, \\'select2-container-disabled\\': $select.disabled, \\'select2-container-active\\': $select.focus, \\'select2-allowclear\\': $select.allowClear && !$select.isEmpty()}\\\"><div class=\\\"ui-select-match\\\"></div><div class=\\\"select2-drop select2-with-searchbox select2-drop-active\\\" ng-class=\\\"{\\'select2-display-none\\': !$select.open}\\\"><div class=\\\"select2-search\\\" ng-show=\\\"$select.searchEnabled\\\"><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" role=\\\"combobox\\\" aria-expanded=\\\"true\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"ui-select-search select2-input\\\" ng-model=\\\"$select.search\\\"></div><div class=\\\"ui-select-choices\\\"></div></div></div>\");\r\n    $templateCache.put(\"selectize/choices.tpl.html\", \"<div ng-show=\\\"$select.open\\\" class=\\\"ui-select-choices selectize-dropdown single\\\"><div class=\\\"ui-select-choices-content selectize-dropdown-content\\\"><div class=\\\"ui-select-choices-group optgroup\\\" role=\\\"listbox\\\"><div ng-show=\\\"$select.isGrouped\\\" class=\\\"ui-select-choices-group-label optgroup-header\\\" ng-bind=\\\"$group.name\\\"></div><div role=\\\"option\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\\\"><div class=\\\"option ui-select-choices-row-inner\\\" data-selectable=\\\"\\\"></div></div></div></div></div>\");\r\n    $templateCache.put(\"selectize/match.tpl.html\", \"<div ng-hide=\\\"($select.open || $select.isEmpty())\\\" class=\\\"ui-select-match\\\" ng-transclude=\\\"\\\"></div>\");\r\n    $templateCache.put(\"selectize/select.tpl.html\", \"<div class=\\\"ui-select-container selectize-control single\\\" ng-class=\\\"{\\'open\\': $select.open}\\\"><div class=\\\"selectize-input\\\" ng-class=\\\"{\\'focus\\': $select.open, \\'disabled\\': $select.disabled, \\'selectize-focus\\' : $select.focus}\\\" ng-click=\\\"$select.activate()\\\"><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" tabindex=\\\"-1\\\" class=\\\"ui-select-search ui-select-toggle\\\" ng-click=\\\"$select.toggle($event)\\\" placeholder=\\\"{{$select.placeholder}}\\\" ng-model=\\\"$select.search\\\" ng-hide=\\\"!$select.searchEnabled || ($select.selected && !$select.open)\\\" ng-disabled=\\\"$select.disabled\\\" aria-label=\\\"{{ $select.baseTitle }}\\\"></div><div class=\\\"ui-select-choices\\\"></div></div>\");\r\n}]);","/* \r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n(function(){\r\n    \r\n    'use strict';\r\n\r\n    angular.module('toolbarButtons', [])\r\n\r\n    .directive('filterButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"{{tooltipText}}\" class=\"btn btn-default btn-mini btn-toolbar filterBtn\" data-toggle=\"dropdown\">\\n\\\r\n                                <a class=\"toolbar-icon filter\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu awk-df-form-dropdown-filter awk-df-form-dropdown pull-right\" role=\"menu\" >\\n\\\r\n                                <li >\\n\\\r\n                                    <form name=\"form\" role=\"form\" style=\"padding: 10px; \">\\n\\\r\n                                        <div form-directive ></div>\\n\\\r\n                                    </form>\\n\\\r\n                                </li>\\n\\\r\n                            </ul>\\n\\\r\n                    </div>',\r\n                scope: {\r\n                    tooltipText: '@',\r\n                    iconClass: '@',\r\n                    fieldVal: '@',\r\n                    submitLabel: '@',\r\n                    clearLabel: '@',\r\n                    submitFunc: '@',\r\n                    clearFunc: '@'\r\n                   \r\n                },\r\n                /**/\r\n                link: function(scope, elem, attrs) {\r\n\r\n                    //scope.$parent.iconClass = scope.iconClass;\r\n                    //var iconBtn = elem.find('a');\r\n                    //iconBtn..attr('class', \"toolbar-icon \"+iconClass);\r\n                    var childDir = elem.find('div');\r\n                    childDir.attr('filter-fields', scope.fieldVal);\r\n                    childDir.attr('filter-array-name', scope.fieldVal);\r\n                    childDir.attr('submit-label', scope.submitLabel);\r\n                    childDir.attr('clear-label', scope.clearLabel);\r\n                    childDir.attr('on-submit', scope.submitFunc);\r\n                    childDir.attr('on-clear', scope.clearFunc);\r\n                    elem.on('show.bs.dropdown', function (event) {\r\n                        scope.$emit(\"filterDropDownOpened\",{\"target\":event.currentTarget});\r\n                    })\r\n                   // $compile(childDir.contents())(scope.$parent);\r\n                    $compile(elem.contents())(scope.$parent);\r\n                }\r\n                /**/\r\n            };\r\n        }])\r\n\r\n\r\n\r\n    /*REPORT BUTTON*/\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name reportButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the report button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'action' attribute.\r\n\r\n     * @example <span report-button action=\"generateReportFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('reportButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button title=\"View report\" class=\"btn btn-default btn-mini\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <i class=\"glyphicon glyphicon-stats\"></i>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu pull-right\" role=\"menu\">\\n\\\r\n                                <div>\\n\\\r\n                                    <img src=\"../app/assets/img/report.png\"></img>\\n\\\r\n                                 </div>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&'\r\n                },\r\n                link: function(scope, elem, attrs) {\r\n                    /*\r\n                    var btnElem = elem.find('button');\r\n                    btnElem.attr('ng-click', scope.saveFunction);\r\n                    $compile(elem.contents())(scope.$parent);\r\n                    */\r\n                }\r\n            }\r\n\r\n        }])\r\n\r\n\r\n\r\n    /*CREATE REPORT BUTTON*/    \r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n\r\n    .directive('createReportBtn', ['$compile', function($compile) {\r\n\r\n        console.log('in new directive');\r\n        return{\r\n            restrict: 'A',\r\n            replace: true,\r\n            template: '<div class=\"dropdown btn-group\">\\n\\\r\n                        <button tooltip=\"{{tooltipText}}\" class=\"btn btn-default btn-mini btn-toolbar filterBtn\" data-toggle=\"dropdown\">\\n\\\r\n                            <a class=\"toolbar-icon createReport\"></a>\\n\\\r\n                        </button>\\n\\\r\n                        <ul class=\"dropdown-menu form-dropdown-filter toolbar-dropdown pull-right\" role=\"menu\">\\n\\\r\n                            <li >\\n\\\r\n                                <form name=\"form\" role=\"form\" class=\"form\" style=\"padding: 10px; \">\\n\\\r\n                                    <div form-directive ></div>\\n\\\r\n                                </form>\\n\\\r\n                            </li>\\n\\\r\n                        </ul>\\n\\\r\n                </div>',\r\n            scope: {\r\n                tooltipText: '@',\r\n                iconClass: '@',\r\n                fieldVal: '@',\r\n                submitLabel: '@',\r\n                clearLabel: '@',\r\n                submitFunc: '@',\r\n                clearFunc: '@'\r\n            },\r\n            /**/\r\n            link: function(scope, elem, attrs) {\r\n\r\n                console.log('ff: ', scope.fieldVal);\r\n                console.log('sf: ', scope.searchFunc);\r\n                //scope.$parent.iconClass = scope.iconClass;\r\n                //var iconBtn = elem.find('a');\r\n                //iconBtn..attr('class', \"toolbar-icon \"+iconClass);\r\n                var childDir = elem.find('div');\r\n                childDir.attr('filter-fields', scope.fieldVal);\r\n                childDir.attr('filter-array-name', scope.fieldVal);\r\n                childDir.attr('submit-label', scope.submitLabel);\r\n                childDir.attr('clear-label', scope.clearLabel);\r\n                childDir.attr('on-submit', scope.submitFunc);\r\n                childDir.attr('on-clear', scope.clearFunc);\r\n               // $compile(childDir.contents())(scope.$parent);\r\n                $compile(elem.contents())(scope.$parent);\r\n            }\r\n            /**/\r\n        };\r\n    }])\r\n\r\n\r\n    /*RESET BUTTON*/\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name resetButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the reset button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'action' attribute.\r\n\r\n     * @example <span reset-button action=\"resetFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('resetButton', ['$rootScope','$compile', function($rootScope, $compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Refresh\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <a class=\"toolbar-icon refresh\"></a>\\n\\\r\n                            </button>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action:'&'\r\n                }\r\n            }\r\n\r\n        }])\r\n\r\n\r\n    /*TOOLBAR BUTTON*/\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name toolbarButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'action' attribute.\r\n     * This button can be used as a template to create toolbar button by providing a tooltip, icon and action.\r\n\r\n     * @example <span toolbar-button tooltip-text=\"Click here\" icon-class=\"someCssClass\" action=\"someFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('toolbarButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"{{tooltipText}}\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <a class=\"toolbar-icon {{iconClass}}\"></a>\\n\\\r\n                            </button>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    tooltipText:'@',\r\n                    iconClass:'@',\r\n                    action: '&'\r\n                }\r\n            }\r\n\r\n        }])\r\n\r\n\r\n    /*EXPORT BUTTON*/\r\n\r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n    .directive('exportButton', ['$compile', 'eventConstants', \r\n        function($compile, eventConstants) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Export\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <a class=\"toolbar-icon export\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu toolbar-dropdown pull-right\" role=\"menu\">\\n\\\r\n                                    <li><a href=\"#\" ng-click=\"exportasXLS()\"><img src=\"styles/img/toolbar_icons/spreadsheet.png\"></img>  XLS</a></li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&'\r\n                },\r\n                controller: ['$scope', function($scope) {\r\n\r\n               \r\n                /**\r\n                 * @ngdoc function\r\n                 * @name exportasCSV\r\n                 * @description \r\n                 * To export the grid data in CSV format.\r\n                 * It broadcasts a global event 'exportasCSV' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */\r\n               $scope.exportasCSV = function() {\r\n                    $scope.$emit(eventConstants.EXPORT_AS_CSV);\r\n                }; \r\n\r\n\r\n                /**\r\n                 * @ngdoc function\r\n                 * @name exportasXLS\r\n                 * @description \r\n                 * To export the grid data in XLS format.\r\n                 * It broadcasts a global event 'exportasXLS' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.exportasXLS = function() {\r\n                    $scope.$emit(eventConstants.EXPORT_AS_XLS);\r\n                };  \r\n\r\n                 /**\r\n                 * @ngdoc function\r\n                 * @name exportasPDF\r\n                 * @description \r\n                 * To export the grid data in PDF format.\r\n                 * It broadcasts a global event 'exportasPDF' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.exportasPDF = function() {\r\n                    $scope.$emit(eventConstants.EXPORT_AS_PDF);\r\n                };  \r\n\r\n            }]\r\n            };\r\n\r\n        }])\r\n\r\n\r\n    /*FILE BUTTON*/\r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n    .directive('fileButton', ['$compile', 'eventConstants', \r\n        function($compile, eventConstants) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\" style=\"margin:0px;\">\\n\\\r\n                            <button tooltip=\"File Upload\" class=\"btn btn-default btn-mini btn-toolbar filterBtn\" data-toggle=\"dropdown\" >\\n\\\r\n                                <a class=\"toolbar-icon upload\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu toolbar-dropdown-filter pull-right\" role=\"menu\" style=\"padding:0px;\">\\n\\\r\n                                    <li>\\n\\\r\n                                        <form class=\"fileUplaodBtn\">\\n\\\r\n                                            <div uploader ></div>\\n\\\r\n                                        </form>\\n\\\r\n                                    </li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&',\r\n                    fileConfigUrl:'@',\r\n                    fileUploadUrl:'@',\r\n                    isMultipleFile:'@',\r\n                    userId:'@',\r\n                    monthList: '=',\r\n                    yearList:'='\r\n                },\r\n                link: function(scope, elem, attrs) {\r\n                    $compile(elem.contents())(scope.$parent);\r\n                }\r\n            };\r\n\r\n        }])\r\n\r\n\r\n    /*SAVE BUTTON*/\r\n\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name saveButton\r\n     * @module toolbarButtons\r\n     * @description \r\n     * Angular directive to show the save button as a part of toolbar.\r\n     * This directive belongs to the 'toolbarButtons' module and should be included in the app.js to be used within an application.\r\n     * Reference to the handler function in the view's parent controller can be provided via setting the 'saveFunction' & 'saveAsFunction' attribute.\r\n\r\n     * @example <span save-button save-function=\"someFunction()\" save-as-function=\"someOtherFunction()\"></span>\r\n     * @see http://docs.angularjs.org/guide/directive\r\n     *\r\n     */\r\n\r\n    .directive('saveButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Save\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\">\\n\\\r\n                                <a class=\"toolbar-icon save\"></a>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu pull-right\" role=\"menu\">\\n\\\r\n                                    <li><a href=\"#\" ng-click=\"saveFunction()\">1. Save</a></li>\\n\\\r\n                                    <li><a href=\"#\" ng-click=\"saveAsFunction()\">2. Save as</a></li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    saveFunction: '&',\r\n                    saveAsFunction: '&'\r\n                    }\r\n                }\r\n\r\n        }])\r\n\r\n\r\n    /*UPLOAD BUTTON*/\r\n\r\n    /* \r\n     * To change this template, choose Tools | Templates\r\n     * and open the template in the editor.\r\n     */\r\n\r\n    .directive('uploadButton', ['$compile', function($compile) {\r\n\r\n            return{\r\n                restrict: 'A',\r\n                replace: true,\r\n                template: '<div class=\"dropdown btn-group\">\\n\\\r\n                            <button tooltip=\"Upload\" class=\"btn btn-default btn-mini btn-toolbar\" data-toggle=\"dropdown\" ng-click=\"action()\">\\n\\\r\n                                <i class=\"toolbar-icon glyphicon glyphicon-upload\"></i>\\n\\\r\n                            </button>\\n\\\r\n                            <ul class=\"dropdown-menu pull-right\" role=\"menu\">\\n\\\r\n                                    <li><a href=\"#\" onclick=\"uploadasXLS()\">1. XLS</a></li>\\n\\\r\n                                    <li><a href=\"#\" onclick=\"uploadasCSV()\">2. CSV</a></li>\\n\\\r\n                                    <li><a href=\"#\" onclick=\"uploadasDelimited()\">3. Delimited</a></li>\\n\\\r\n                            </ul>\\n\\\r\n                        </div>',\r\n                scope: {\r\n                    action: '&'\r\n                },\r\n\r\n                controller: ['$scope', function($scope) {\r\n\r\n               \r\n                /**\r\n                 * @ngdoc function\r\n                 * @name uploadasCSV\r\n                 * @description \r\n                 * To upload the grid data in CSV format.\r\n                 * It broadcasts a global event 'uploadasCSV' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */\r\n               $scope.uploadasCSV = function() {\r\n\r\n                    $rootScope.$broadcast(eventConstants.UPLOAD_AS_CSV);\r\n                }; \r\n\r\n\r\n                /**\r\n                 * @ngdoc function\r\n                 * @name uploadasXLS\r\n                 * @description \r\n                 * To upload the grid data in XLS format.\r\n                 * It broadcasts a global event 'uploadasXLS' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.uploadasXLS = function() {\r\n\r\n                    $rootScope.$broadcast(eventConstants.UPLOAD_AS_XLS);\r\n                };  \r\n\r\n                 /**\r\n                 * @ngdoc function\r\n                 * @name uploadasDelimited\r\n                 * @description \r\n                 * To export the grid data in PDF format.\r\n                 * It broadcasts a global event 'uploadasDelimited' which can be handled anywhere on the top level.\r\n                 * \r\n                 * @return {void}\r\n                 */ \r\n\r\n                $scope.uploadasDelimited = function() {\r\n\r\n                    $rootScope.$broadcast(eventConstants.UPLOAD_AS_DELIMITED);\r\n                };  \r\n\r\n            }]\r\n            };\r\n\r\n        }]);\r\n\r\n})();\r\n\r\n\n/**\r\n * Enhanced Select2 Dropmenus\r\n *\r\n * @AJAX Mode - When in this mode, your value will be an object (or array of objects) of the data used by Select2\r\n *     This change is so that you do not have to do an additional query yourself on top of Select2's own query\r\n * @params [options] {object} The configuration options passed to $.fn.select2(). Refer to the documentation\r\n */\r\nangular.module('ui.select2', []).value('uiSelect2Config', {}).directive('uiSelect2', ['uiSelect2Config', '$timeout', function (uiSelect2Config, $timeout) {\r\n  var options = {};\r\n  if (uiSelect2Config) {\r\n    angular.extend(options, uiSelect2Config);\r\n  }\r\n  return {\r\n    require: 'ngModel',\r\n    priority: 1,\r\n    compile: function (tElm, tAttrs) {\r\n      var watch,\r\n        repeatOption,\r\n        repeatAttr,\r\n        isSelect = tElm.is('select'),\r\n        isMultiple = angular.isDefined(tAttrs.multiple);\r\n\r\n      // Enable watching of the options dataset if in use\r\n      if (tElm.is('select')) {\r\n        repeatOption = tElm.find( 'optgroup[ng-repeat], optgroup[data-ng-repeat], option[ng-repeat], option[data-ng-repeat]');\r\n\r\n        if (repeatOption.length) {\r\n          repeatAttr = repeatOption.attr('ng-repeat') || repeatOption.attr('data-ng-repeat');\r\n          watch = jQuery.trim(repeatAttr.split('|')[0]).split(' ').pop();\r\n        }\r\n      }\r\n\r\n      return function (scope, elm, attrs, controller) {\r\n        // instance-specific options\r\n        var opts = angular.extend({}, options, scope.$eval(attrs.uiSelect2));\r\n\r\n        /*\r\n        Convert from Select2 view-model to Angular view-model.\r\n        */\r\n        var convertToAngularModel = function(select2_data) {\r\n          var model;\r\n          if (opts.simple_tags) {\r\n            model = [];\r\n            angular.forEach(select2_data, function(value, index) {\r\n              model.push(value.id);\r\n            });\r\n          } else {\r\n            model = select2_data;\r\n          }\r\n          return model;\r\n        };\r\n\r\n        /*\r\n        Convert from Angular view-model to Select2 view-model.\r\n        */\r\n        var convertToSelect2Model = function(angular_data) {\r\n          var model = [];\r\n          if (!angular_data) {\r\n            return model;\r\n          }\r\n\r\n          if (opts.simple_tags) {\r\n            model = [];\r\n            angular.forEach(\r\n              angular_data,\r\n              function(value, index) {\r\n                model.push({'id': value, 'text': value});\r\n              });\r\n          } else {\r\n            model = angular_data;\r\n          }\r\n          return model;\r\n        };\r\n\r\n        if (isSelect) {\r\n          // Use <select multiple> instead\r\n          delete opts.multiple;\r\n          delete opts.initSelection;\r\n        } else if (isMultiple) {\r\n          opts.multiple = true;\r\n        }\r\n\r\n        if (controller) {\r\n          // Watch the model for programmatic changes\r\n           scope.$watch(tAttrs.ngModel, function(current, old) {\r\n            if (!current) {\r\n              return;\r\n            }\r\n            if (current === old) {\r\n              return;\r\n            }\r\n            controller.$render();\r\n          }, true);\r\n          controller.$render = function () {\r\n            if (isSelect) {\r\n              elm.select2('val', controller.$viewValue);\r\n            } else {\r\n              if (opts.multiple) {\r\n                var viewValue = controller.$viewValue;\r\n                if (angular.isString(viewValue)) {\r\n                  viewValue = viewValue.split(',');\r\n                }\r\n                elm.select2(\r\n                  'data', convertToSelect2Model(viewValue));\r\n              } else {\r\n                if (angular.isObject(controller.$viewValue)) {\r\n                  elm.select2('data', controller.$viewValue);\r\n                } else if (!controller.$viewValue) {\r\n                  elm.select2('data', null);\r\n                } else {\r\n                  elm.select2('val', controller.$viewValue);\r\n                }\r\n              }\r\n            }\r\n          };\r\n\r\n          // Watch the options dataset for changes\r\n          if (watch) {\r\n            scope.$watch(watch, function (newVal, oldVal, scope) {\r\n              if (angular.equals(newVal, oldVal)) {\r\n                return;\r\n              }\r\n              // Delayed so that the options have time to be rendered\r\n              $timeout(function () {\r\n                elm.select2('val', controller.$viewValue);\r\n                // Refresh angular to remove the superfluous option\r\n                elm.trigger('change');\r\n                if(newVal && !oldVal && controller.$setPristine) {\r\n                  controller.$setPristine(true);\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n          // Update valid and dirty statuses\r\n          controller.$parsers.push(function (value) {\r\n            var div = elm.prev();\r\n            div\r\n              .toggleClass('ng-invalid', !controller.$valid)\r\n              .toggleClass('ng-valid', controller.$valid)\r\n              .toggleClass('ng-invalid-required', !controller.$valid)\r\n              .toggleClass('ng-valid-required', controller.$valid)\r\n              .toggleClass('ng-dirty', controller.$dirty)\r\n              .toggleClass('ng-pristine', controller.$pristine);\r\n            return value;\r\n          });\r\n\r\n          if (!isSelect) {\r\n            // Set the view and model value and update the angular template manually for the ajax/multiple select2.\r\n            elm.bind(\"change\", function (e) {\r\n              e.stopImmediatePropagation();\r\n              \r\n              if (scope.$$phase || scope.$root.$$phase) {\r\n                return;\r\n              }\r\n              scope.$apply(function () {\r\n                controller.$setViewValue(\r\n                  convertToAngularModel(elm.select2('data')));\r\n              });\r\n            });\r\n\r\n            if (opts.initSelection) {\r\n              var initSelection = opts.initSelection;\r\n              opts.initSelection = function (element, callback) {\r\n                initSelection(element, function (value) {\r\n                  var isPristine = controller.$pristine;\r\n                  controller.$setViewValue(convertToAngularModel(value));\r\n                  callback(value);\r\n                  if (isPristine) {\r\n                    controller.$setPristine();\r\n                  }\r\n                  elm.prev().toggleClass('ng-pristine', controller.$pristine);\r\n                });\r\n              };\r\n            }\r\n          }\r\n        }\r\n\r\n        elm.bind(\"$destroy\", function() {\r\n          elm.select2(\"destroy\");\r\n        });\r\n\r\n        attrs.$observe('disabled', function (value) {\r\n          elm.select2('enable', !value);\r\n        });\r\n\r\n        attrs.$observe('readonly', function (value) {\r\n          elm.select2('readonly', !!value);\r\n        });\r\n\r\n        if (attrs.ngMultiple) {\r\n          scope.$watch(attrs.ngMultiple, function(newVal) {\r\n            attrs.$set('multiple', !!newVal);\r\n            elm.select2(opts);\r\n          });\r\n        }\r\n\r\n        // Initialize the plugin late so that the injected DOM does not disrupt the template compiler\r\n        $timeout(function () {\r\n          elm.select2(opts);\r\n\r\n          // Set initial value - I'm not sure about this but it seems to need to be there\r\n          elm.select2('data', controller.$modelValue);\r\n          // important!\r\n          controller.$render();\r\n\r\n          // Not sure if I should just check for !isSelect OR if I should check for 'tags' key\r\n          if (!opts.initSelection && !isSelect) {\r\n            var isPristine = controller.$pristine;\r\n            controller.$setViewValue(\r\n              convertToAngularModel(elm.select2('data'))\r\n            );\r\n            if (isPristine) {\r\n              controller.$setPristine();\r\n            }\r\n            elm.prev().toggleClass('ng-pristine', controller.$pristine);\r\n          }\r\n        });\r\n      };\r\n    }\r\n  };\r\n}]);\n/*global angular */\n/*\n jQuery UI Datepicker plugin wrapper\n\n @note If ≤ IE8 make sure you have a polyfill for Date.toISOString()\n @param [ui-date] {object} Options to pass to $.fn.datepicker() merged onto uiDateConfig\n */\n\nangular.module('ui.date', [])\n\n.constant('uiDateConfig', {})\n\n.directive('uiDate', ['uiDateConfig', function (uiDateConfig) {\n  'use strict';\n  var options;\n  options = {};\n  angular.extend(options, uiDateConfig);\n  return {\n    require:'?ngModel',\n    link:function (scope, element, attrs, controller) {\n      var getOptions = function () {\n        return angular.extend({}, uiDateConfig, scope.$eval(attrs.uiDate));\n      };\n      var initDateWidget = function () {\n        var showing = false;\n        var opts = getOptions();\n\n        // If we have a controller (i.e. ngModelController) then wire it up\n        if (controller) {\n\n          // Set the view value in a $apply block when users selects\n          // (calling directive user's function too if provided)\n          var _onSelect = opts.onSelect || angular.noop;\n          opts.onSelect = function (value, picker) {\n            scope.$apply(function() {\n              showing = true;\n              controller.$setViewValue(element.datepicker(\"getDate\"));\n              _onSelect(value, picker);\n              element.blur();\n              scope.$emit( 'ngGridEventEndCellEdit' ); \n            });\n          };\n          opts.beforeShow = function() {\n            showing = true;\n          };\n          opts.onClose = function(value, picker) {\n            showing = false;\n          };\n          scope.$on('ngGridEventStartCellEdit', function () {\n        \t  element.focus(); \n          });\n          element.on('blur', function() {\n            if ( !showing ) {\n              scope.$apply(function() {\n                element.datepicker(\"setDate\", element.datepicker(\"getDate\"));\n                controller.$setViewValue(element.datepicker(\"getDate\"));\n              });\n            }\n          });\n\n          // Update the date picker when the model changes\n          controller.$render = function () {\n            var date = controller.$viewValue;\n            if ( angular.isDefined(date) && date !== null && !angular.isDate(date) ) {\n              throw new Error('ng-Model value must be a Date object - currently it is a ' + typeof date + ' - use ui-date-format to convert it from a string');\n            }\n            element.datepicker(\"setDate\", date);\n          };\n        }\n        // If we don't destroy the old one it doesn't update properly when the config changes\n        element.datepicker('destroy');\n        // Create the new datepicker widget\n        element.datepicker(opts);\n        if ( controller ) {\n          // Force a render to override whatever is in the input text box\n          controller.$render();\n        }\n      };\n      // Watch for changes to the directives options\n      scope.$watch(getOptions, initDateWidget, true);\n    }\n  };\n}\n])\n\n.constant('uiDateFormatConfig', '')\n\n.directive('uiDateFormat', ['uiDateFormatConfig', function(uiDateFormatConfig) {\n  var directive = {\n    require:'ngModel',\n    link: function(scope, element, attrs, modelCtrl) {\n      var dateFormat = attrs.uiDateFormat || uiDateFormatConfig;\n      if ( dateFormat ) {\n        // Use the datepicker with the attribute value as the dateFormat string to convert to and from a string\n        modelCtrl.$formatters.push(function(value) {\n          if (angular.isString(value) ) {\n            return jQuery.datepicker.parseDate(dateFormat, value);\n          }\n          return null;\n        });\n        modelCtrl.$parsers.push(function(value){\n          if (value) {\n            return jQuery.datepicker.formatDate(dateFormat, value);\n          }\n          return null;\n        });\n      } else {\n        // Default to ISO formatting\n        modelCtrl.$formatters.push(function(value) {\n          if (angular.isString(value) ) {\n            return new Date(value);\n          }\n          return null;\n        });\n        modelCtrl.$parsers.push(function(value){\n          if (value) {\n            return value.toISOString();\n          }\n          return null;\n        });\n      }\n    }\n  };\n  return directive;\n}]);\n\n$(function() {\n\n    $('#side-menu').metisMenu();\n\n});\n\n//Loads the correct sidebar on window load,\n//collapses the sidebar on window resize.\n// Sets the min-height of #page-wrapper to window size\n$(function() {\n    $(window).bind(\"load resize\", function() {\n        topOffset = 50;\n        width = (this.window.innerWidth > 0) ? this.window.innerWidth : this.screen.width;\n        if (width < 768) {\n            $('div.navbar-collapse').addClass('collapse');\n            topOffset = 100; // 2-row-menu\n        } else {\n            $('div.navbar-collapse').removeClass('collapse');\n        }\n\n        height = ((this.window.innerHeight > 0) ? this.window.innerHeight : this.screen.height) - 1;\n        height = height - topOffset;\n        if (height < 1) height = 1;\n        if (height > topOffset) {\n            $(\"#page-wrapper\").css(\"min-height\", (height) + \"px\");\n        }\n    });\n\n    var url = window.location;\n    var element = $('ul.nav a').filter(function() {\n        return this.href == url || url.href.indexOf(this.href) == 0;\n    }).addClass('active').parent().parent().addClass('in').parent();\n    if (element.is('li')) {\n        element.addClass('active');\n    }\n});\n\n/*!\r\n * ui-select\r\n * http://github.com/angular-ui/ui-select\r\n * Version: 0.11.2 - 2015-03-17T04:08:46.474Z\r\n * License: MIT\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var KEY = {\r\n        TAB: 9,\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        SPACE: 32,\r\n        LEFT: 37,\r\n        UP: 38,\r\n        RIGHT: 39,\r\n        DOWN: 40,\r\n        SHIFT: 16,\r\n        CTRL: 17,\r\n        ALT: 18,\r\n        PAGE_UP: 33,\r\n        PAGE_DOWN: 34,\r\n        HOME: 36,\r\n        END: 35,\r\n        BACKSPACE: 8,\r\n        DELETE: 46,\r\n        COMMAND: 91,\r\n\r\n        MAP: {\r\n            91: \"COMMAND\",\r\n            8: \"BACKSPACE\",\r\n            9: \"TAB\",\r\n            13: \"ENTER\",\r\n            16: \"SHIFT\",\r\n            17: \"CTRL\",\r\n            18: \"ALT\",\r\n            19: \"PAUSEBREAK\",\r\n            20: \"CAPSLOCK\",\r\n            27: \"ESC\",\r\n            32: \"SPACE\",\r\n            33: \"PAGE_UP\",\r\n            34: \"PAGE_DOWN\",\r\n            35: \"END\",\r\n            36: \"HOME\",\r\n            37: \"LEFT\",\r\n            38: \"UP\",\r\n            39: \"RIGHT\",\r\n            40: \"DOWN\",\r\n            43: \"+\",\r\n            44: \"PRINTSCREEN\",\r\n            45: \"INSERT\",\r\n            46: \"DELETE\",\r\n            48: \"0\",\r\n            49: \"1\",\r\n            50: \"2\",\r\n            51: \"3\",\r\n            52: \"4\",\r\n            53: \"5\",\r\n            54: \"6\",\r\n            55: \"7\",\r\n            56: \"8\",\r\n            57: \"9\",\r\n            59: \";\",\r\n            61: \"=\",\r\n            65: \"A\",\r\n            66: \"B\",\r\n            67: \"C\",\r\n            68: \"D\",\r\n            69: \"E\",\r\n            70: \"F\",\r\n            71: \"G\",\r\n            72: \"H\",\r\n            73: \"I\",\r\n            74: \"J\",\r\n            75: \"K\",\r\n            76: \"L\",\r\n            77: \"M\",\r\n            78: \"N\",\r\n            79: \"O\",\r\n            80: \"P\",\r\n            81: \"Q\",\r\n            82: \"R\",\r\n            83: \"S\",\r\n            84: \"T\",\r\n            85: \"U\",\r\n            86: \"V\",\r\n            87: \"W\",\r\n            88: \"X\",\r\n            89: \"Y\",\r\n            90: \"Z\",\r\n            96: \"0\",\r\n            97: \"1\",\r\n            98: \"2\",\r\n            99: \"3\",\r\n            100: \"4\",\r\n            101: \"5\",\r\n            102: \"6\",\r\n            103: \"7\",\r\n            104: \"8\",\r\n            105: \"9\",\r\n            106: \"*\",\r\n            107: \"+\",\r\n            109: \"-\",\r\n            110: \".\",\r\n            111: \"/\",\r\n            112: \"F1\",\r\n            113: \"F2\",\r\n            114: \"F3\",\r\n            115: \"F4\",\r\n            116: \"F5\",\r\n            117: \"F6\",\r\n            118: \"F7\",\r\n            119: \"F8\",\r\n            120: \"F9\",\r\n            121: \"F10\",\r\n            122: \"F11\",\r\n            123: \"F12\",\r\n            144: \"NUMLOCK\",\r\n            145: \"SCROLLLOCK\",\r\n            186: \";\",\r\n            187: \"=\",\r\n            188: \",\",\r\n            189: \"-\",\r\n            190: \".\",\r\n            191: \"/\",\r\n            192: \"`\",\r\n            219: \"[\",\r\n            220: \"\\\\\",\r\n            221: \"]\",\r\n            222: \"'\"\r\n        },\r\n\r\n        isControl: function(e) {\r\n            var k = e.which;\r\n            switch (k) {\r\n                case KEY.COMMAND:\r\n                case KEY.SHIFT:\r\n                case KEY.CTRL:\r\n                case KEY.ALT:\r\n                    return true;\r\n            }\r\n\r\n            if (e.metaKey) return true;\r\n\r\n            return false;\r\n        },\r\n        isFunctionKey: function(k) {\r\n            k = k.which ? k.which : k;\r\n            return k >= 112 && k <= 123;\r\n        },\r\n        isVerticalMovement: function(k) {\r\n            return ~[KEY.UP, KEY.DOWN].indexOf(k);\r\n        },\r\n        isHorizontalMovement: function(k) {\r\n            //return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);\r\n            return ~[KEY.LEFT, KEY.RIGHT].indexOf(k);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add querySelectorAll() to jqLite.\r\n     *\r\n     * jqLite find() is limited to lookups by tag name.\r\n     * TODO This will change with future versions of AngularJS, to be removed when this happens\r\n     *\r\n     * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586\r\n     * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598\r\n     */\r\n    if (angular.element.prototype.querySelectorAll === undefined) {\r\n        angular.element.prototype.querySelectorAll = function(selector) {\r\n            return angular.element(this[0].querySelectorAll(selector));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Add closest() to jqLite.\r\n     */\r\n    if (angular.element.prototype.closest === undefined) {\r\n        angular.element.prototype.closest = function(selector) {\r\n            var elem = this[0];\r\n            var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n\r\n            while (elem) {\r\n                if (matchesSelector.bind(elem)(selector)) {\r\n                    return elem;\r\n                } else {\r\n                    elem = elem.parentElement;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    }\r\n\r\n    var latestId = 0;\r\n\r\n    var uis = angular.module('ui.select', [])\r\n\r\n    .constant('uiSelectConfig', {\r\n        theme: 'bootstrap',\r\n        searchEnabled: true,\r\n        sortable: false,\r\n        placeholder: '', // Empty by default, like HTML tag <select>\r\n        refreshDelay: 1000, // In milliseconds\r\n        closeOnSelect: true,\r\n        generateId: function() {\r\n            return latestId++;\r\n        },\r\n        appendToBody: false\r\n    })\r\n\r\n    // See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913\r\n    .service('uiSelectMinErr', function() {\r\n        var minErr = angular.$$minErr('ui.select');\r\n        return function() {\r\n            var error = minErr.apply(this, arguments);\r\n            var message = error.message.replace(new RegExp('\\nhttp://errors.angularjs.org/.*'), '');\r\n            return new Error(message);\r\n        };\r\n    })\r\n\r\n    // Recreates old behavior of ng-transclude. Used internally.\r\n    .directive('uisTranscludeAppend', function() {\r\n        return {\r\n            link: function(scope, element, attrs, ctrl, transclude) {\r\n                transclude(scope, function(clone) {\r\n                    element.append(clone);\r\n                });\r\n            }\r\n        };\r\n    })\r\n\r\n    /**\r\n     * Highlights text that matches $select.search.\r\n     *\r\n     * Taken from AngularUI Bootstrap Typeahead\r\n     * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340\r\n     */\r\n    .filter('highlight', function() {\r\n        function escapeRegexp(queryToEscape) {\r\n            return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\r\n        }\r\n\r\n        return function(matchItem, query) {\r\n            return query && matchItem ? matchItem.replace(new RegExp(escapeRegexp(query), 'gi'), '<span class=\"ui-select-highlight\">$&</span>') : matchItem;\r\n        };\r\n    })\r\n\r\n    /**\r\n     * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/\r\n     *\r\n     * Taken from AngularUI Bootstrap Position:\r\n     * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70\r\n     */\r\n    .factory('uisOffset', ['$document', '$window',\r\n        function($document, $window) {\r\n\r\n            return function(element) {\r\n                var boundingClientRect = element[0].getBoundingClientRect();\r\n                return {\r\n                    width: boundingClientRect.width || element.prop('offsetWidth'),\r\n                    height: boundingClientRect.height || element.prop('offsetHeight'),\r\n                    top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),\r\n                    left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)\r\n                };\r\n            };\r\n        }\r\n    ]);\r\n\r\n    uis.directive('uiSelectChoices', ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile',\r\n        function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile) {\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                require: '^uiSelect',\r\n                replace: true,\r\n                transclude: true,\r\n                templateUrl: function(tElement) {\r\n                    // Gets theme attribute from parent (ui-select)\r\n                    var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;\r\n                    return theme + '/choices.tpl.html';\r\n                },\r\n\r\n                compile: function(tElement, tAttrs) {\r\n\r\n                    if (!tAttrs.repeat) throw uiSelectMinErr('repeat', \"Expected 'repeat' expression.\");\r\n\r\n                    return function link(scope, element, attrs, $select, transcludeFn) {\r\n\r\n                        // var repeat = RepeatParser.parse(attrs.repeat);\r\n                        var groupByExp = attrs.groupBy;\r\n\r\n                        $select.parseRepeatAttr(attrs.repeat, groupByExp); //Result ready at $select.parserResult\r\n\r\n                        $select.disableChoiceExpression = attrs.uiDisableChoice;\r\n                        $select.onHighlightCallback = attrs.onHighlight;\r\n\r\n                        if (groupByExp) {\r\n                            var groups = element.querySelectorAll('.ui-select-choices-group');\r\n                            if (groups.length !== 1) throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-group but got '{0}'.\", groups.length);\r\n                            groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());\r\n                        }\r\n\r\n                        var choices = element.querySelectorAll('.ui-select-choices-row');\r\n                        if (choices.length !== 1) {\r\n                            throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-row but got '{0}'.\", choices.length);\r\n                        }\r\n\r\n                        choices.attr('ng-repeat', RepeatParser.getNgRepeatExpression($select.parserResult.itemName, '$select.items', $select.parserResult.trackByExp, groupByExp))\r\n                            .attr('ng-if', '$select.open') //Prevent unnecessary watches when dropdown is closed\r\n                            .attr('ng-mouseenter', '$select.setActiveItem(' + $select.parserResult.itemName + ')')\r\n                            .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',false,$event)');\r\n\r\n                        var rowsInner = element.querySelectorAll('.ui-select-choices-row-inner');\r\n                        if (rowsInner.length !== 1) throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-row-inner but got '{0}'.\", rowsInner.length);\r\n                        rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat\r\n\r\n                        $compile(element, transcludeFn)(scope); //Passing current transcludeFn to be able to append elements correctly from uisTranscludeAppend\r\n\r\n                        scope.$watch('$select.search', function(newValue) {\r\n                            if (newValue && !$select.open && $select.multiple) $select.activate(false, true);\r\n                            $select.activeIndex = $select.tagging.isActivated ? -1 : 0;\r\n                            $select.refresh(attrs.refresh);\r\n                        });\r\n\r\n                        attrs.$observe('refreshDelay', function() {\r\n                            // $eval() is needed otherwise we get a string instead of a number\r\n                            var refreshDelay = scope.$eval(attrs.refreshDelay);\r\n                            $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;\r\n                        });\r\n                    };\r\n                }\r\n            };\r\n        }\r\n    ]);\r\n\r\n    /**\r\n     * Contains ui-select \"intelligence\".\r\n     *\r\n     * The goal is to limit dependency on the DOM whenever possible and\r\n     * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.\r\n     */\r\n    uis.controller('uiSelectCtrl', ['$scope', '$element', '$timeout', '$filter', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig',\r\n        function($scope, $element, $timeout, $filter, RepeatParser, uiSelectMinErr, uiSelectConfig) {\r\n\r\n            var ctrl = this;\r\n\r\n            var EMPTY_SEARCH = '';\r\n\r\n            ctrl.placeholder = uiSelectConfig.placeholder;\r\n            ctrl.searchEnabled = uiSelectConfig.searchEnabled;\r\n            ctrl.sortable = uiSelectConfig.sortable;\r\n            ctrl.refreshDelay = uiSelectConfig.refreshDelay;\r\n\r\n            ctrl.removeSelected = false; //If selected item(s) should be removed from dropdown list\r\n            ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function\r\n            ctrl.search = EMPTY_SEARCH;\r\n\r\n            ctrl.activeIndex = 0; //Dropdown of choices\r\n            ctrl.items = []; //All available choices\r\n\r\n            ctrl.open = false;\r\n            ctrl.focus = false;\r\n            ctrl.disabled = false;\r\n            ctrl.selected = undefined;\r\n\r\n            ctrl.focusser = undefined; //Reference to input element used to handle focus events\r\n            ctrl.resetSearchInput = true;\r\n            ctrl.multiple = undefined; // Initialized inside uiSelect directive link function\r\n            ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function\r\n            ctrl.tagging = {\r\n                isActivated: false,\r\n                fct: undefined\r\n            };\r\n            ctrl.taggingTokens = {\r\n                isActivated: false,\r\n                tokens: undefined\r\n            };\r\n            ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function\r\n            ctrl.clickTriggeredSelect = false;\r\n            ctrl.$filter = $filter;\r\n\r\n            ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');\r\n            if (ctrl.searchInput.length !== 1) {\r\n                throw uiSelectMinErr('searchInput', \"Expected 1 input.ui-select-search but got '{0}'.\", ctrl.searchInput.length);\r\n            }\r\n\r\n            ctrl.isEmpty = function() {\r\n                return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '';\r\n            };\r\n\r\n            // Most of the time the user does not want to empty the search input when in typeahead mode\r\n            function _resetSearchInput() {\r\n                //console.log(\"_resetSearchInput\")\r\n                if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {\r\n                    //ctrl.search = EMPTY_SEARCH;\r\n                    //reset activeIndex\r\n                    if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {\r\n                        ctrl.activeIndex = ctrl.items.indexOf(ctrl.selected);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user clicks on ui-select, displays the dropdown list\r\n            ctrl.activate = function(initSearchValue, avoidReset) {\r\n                //console.log(\"activate\")\r\n                if (!ctrl.disabled && !ctrl.open) {\r\n                    if (!avoidReset) _resetSearchInput();\r\n\r\n                    $scope.$broadcast('uis:activate');\r\n\r\n                    ctrl.open = true;\r\n\r\n                    ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;\r\n\r\n                    // ensure that the index is set to zero for tagging variants\r\n                    // that where first option is auto-selected\r\n                    if (ctrl.activeIndex === -1 && ctrl.taggingLabel !== false) {\r\n                        ctrl.activeIndex = 0;\r\n                    }\r\n\r\n                    // Give it time to appear before focus\r\n                    $timeout(function() {\r\n                        //console.log(\"timeout\")\r\n                        ctrl.search = initSearchValue || ctrl.search;\r\n                        ctrl.searchInput[0].focus();\r\n                        ctrl.searchInput[0].onblur = ctrl.onRowblur;\r\n                    });\r\n                }\r\n            };\r\n\r\n            ctrl.onRowblur = function() {\r\n                //console.log(\"onRowblur\")\r\n                if (!ctrl.open) {\r\n                    $scope.$emit('focuslost', ctrl.search);\r\n                } else if (!ctrl.searchEnabled) {\r\n                    $scope.$emit('focuslostonopen', ctrl.search);\r\n                }\r\n\r\n                //console.log(\"lost focus******************\", ctrl.search)\r\n            }\r\n            ctrl.findGroupByName = function(name) {\r\n                //console.log(\"findGroupByName\")\r\n                return ctrl.groups && ctrl.groups.filter(function(group) {\r\n                    return group.name === name;\r\n                })[0];\r\n            };\r\n\r\n            ctrl.parseRepeatAttr = function(repeatAttr, groupByExp) {\r\n                //console.log(\"parseRepeatAttr\")\r\n                function updateGroups(items) {\r\n                    ctrl.groups = [];\r\n                    angular.forEach(items, function(item) {\r\n                        var groupFn = $scope.$eval(groupByExp);\r\n                        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];\r\n                        var group = ctrl.findGroupByName(groupName);\r\n                        if (group) {\r\n                            group.items.push(item);\r\n                        } else {\r\n                            ctrl.groups.push({\r\n                                name: groupName,\r\n                                items: [item]\r\n                            });\r\n                        }\r\n                    });\r\n                    ctrl.items = [];\r\n                    ctrl.groups.forEach(function(group) {\r\n                        ctrl.items = ctrl.items.concat(group.items);\r\n                    });\r\n                }\r\n\r\n                function setPlainItems(items) {\r\n                    ctrl.items = items;\r\n                }\r\n\r\n                ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;\r\n\r\n                ctrl.parserResult = RepeatParser.parse(repeatAttr);\r\n\r\n                ctrl.isGrouped = !!groupByExp;\r\n                ctrl.itemProperty = ctrl.parserResult.itemName;\r\n\r\n                ctrl.refreshItems = function(data) {\r\n                    //console.log(\"refreshItems\")\r\n                    data = data || ctrl.parserResult.source($scope);\r\n                    var selectedItems = ctrl.selected;\r\n                    //TODO should implement for single mode removeSelected\r\n                    if ((angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.removeSelected) {\r\n                        ctrl.setItemsFn(data);\r\n                    } else {\r\n                        if (data !== undefined) {\r\n                            var filteredItems = data.filter(function(i) {\r\n                                return selectedItems.indexOf(i) < 0;\r\n                            });\r\n                            ctrl.setItemsFn(filteredItems);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259\r\n                $scope.$watchCollection(ctrl.parserResult.source, function(items) {\r\n                    if (items === undefined || items === null) {\r\n                        // If the user specifies undefined or null => reset the collection\r\n                        // Special case: items can be undefined if the user did not initialized the collection on the scope\r\n                        // i.e $scope.addresses = [] is missing\r\n                        ctrl.items = [];\r\n                    } else {\r\n                        if (!angular.isArray(items)) {\r\n                            throw uiSelectMinErr('items', \"Expected an array but got '{0}'.\", items);\r\n                        } else {\r\n                            //Remove already selected items (ex: while searching)\r\n                            //TODO Should add a test\r\n                            ctrl.refreshItems(items);\r\n                            ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters\r\n                        }\r\n                    }\r\n                });\r\n\r\n            };\r\n\r\n            var _refreshDelayPromise;\r\n\r\n            /**\r\n             * Typeahead mode: lets the user refresh the collection using his own function.\r\n             *\r\n             * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31\r\n             */\r\n            ctrl.refresh = function(refreshAttr) {\r\n                if (refreshAttr !== undefined) {\r\n\r\n                    // Debounce\r\n                    // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155\r\n                    // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177\r\n                    if (_refreshDelayPromise) {\r\n                        $timeout.cancel(_refreshDelayPromise);\r\n                    }\r\n                    _refreshDelayPromise = $timeout(function() {\r\n                        $scope.$eval(refreshAttr);\r\n                    }, ctrl.refreshDelay);\r\n                }\r\n            };\r\n\r\n            ctrl.setActiveItem = function(item) {\r\n                ctrl.activeIndex = ctrl.items.indexOf(item);\r\n            };\r\n\r\n            ctrl.isActive = function(itemScope) {\r\n                //console.log(\"isActive\")\r\n                if (!ctrl.open) {\r\n                    if (ctrl.searchInput && ctrl.searchInput[0]) {\r\n                        //ctrl.search = ctrl.searchInput[0].value;\r\n                        //$scope.$emit('focuslostonopen', ctrl.search);\r\n                    }\r\n                    return false;\r\n                }\r\n                var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);\r\n                var isActive = itemIndex === ctrl.activeIndex;\r\n\r\n                if (!isActive || (itemIndex < 0 && ctrl.taggingLabel !== false) || (itemIndex < 0 && ctrl.taggingLabel === false)) {\r\n                    //console.log(\"isActive 1 \", isActive)\r\n                    return false;\r\n                }\r\n\r\n                if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {\r\n                    itemScope.$eval(ctrl.onHighlightCallback);\r\n                }\r\n\r\n                //console.log(\"isActive \", isActive)\r\n                return isActive;\r\n            };\r\n\r\n            ctrl.isDisabled = function(itemScope) {\r\n                //console.log(\"isDisabled\")\r\n                if (!ctrl.open) return;\r\n\r\n                var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);\r\n                var isDisabled = false;\r\n                var item;\r\n\r\n                if (itemIndex >= 0 && !angular.isUndefined(ctrl.disableChoiceExpression)) {\r\n                    item = ctrl.items[itemIndex];\r\n                    isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression)); // force the boolean value\r\n                    item._uiSelectChoiceDisabled = isDisabled; // store this for later reference\r\n                }\r\n\r\n                return isDisabled;\r\n            };\r\n\r\n\r\n            // When the user selects an item with ENTER or clicks the dropdown\r\n            ctrl.select = function(item, skipFocusser, $event) {\r\n                //console.log(\"select\")\r\n                if (item === undefined || !item._uiSelectChoiceDisabled) {\r\n\r\n                    if (!ctrl.items && !ctrl.search) return;\r\n\r\n                    if (!item || !item._uiSelectChoiceDisabled) {\r\n                        if (ctrl.tagging.isActivated) {\r\n                            // if taggingLabel is disabled, we pull from ctrl.search val\r\n                            if (ctrl.taggingLabel === false) {\r\n                                if (ctrl.activeIndex < 0) {\r\n                                    item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;\r\n                                    if (!item || angular.equals(ctrl.items[0], item)) {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    // keyboard nav happened first, user selected from dropdown\r\n                                    item = ctrl.items[ctrl.activeIndex];\r\n                                }\r\n                            } else {\r\n                                // tagging always operates at index zero, taggingLabel === false pushes\r\n                                // the ctrl.search value without having it injected\r\n                                if (ctrl.activeIndex === 0) {\r\n                                    // ctrl.tagging pushes items to ctrl.items, so we only have empty val\r\n                                    // for `item` if it is a detected duplicate\r\n                                    if (item === undefined) return;\r\n\r\n                                    // create new item on the fly if we don't already have one;\r\n                                    // use tagging function if we have one\r\n                                    if (ctrl.tagging.fct !== undefined && typeof item === 'string') {\r\n                                        item = ctrl.tagging.fct(ctrl.search);\r\n                                        if (!item) return;\r\n                                        // if item type is 'string', apply the tagging label\r\n                                    } else if (typeof item === 'string') {\r\n                                        // trim the trailing space\r\n                                        item = item.replace(ctrl.taggingLabel, '').trim();\r\n                                    }\r\n                                }\r\n                            }\r\n                            // search ctrl.selected for dupes potentially caused by tagging and return early if found\r\n                            if (ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter(function(selection) {\r\n                                    return angular.equals(selection, item);\r\n                                }).length > 0) {\r\n                                ctrl.close(skipFocusser);\r\n                                return;\r\n                            }\r\n\r\n                        }\r\n                        ctrl.searchInput.value = ctrl.selected.name;\r\n                        $scope.$broadcast('uis:select', item);\r\n\r\n                        var locals = {};\r\n                        locals[ctrl.parserResult.itemName] = item;\r\n\r\n                        $timeout(function() {\r\n                            ctrl.onSelectCallback($scope, {\r\n                                $item: item,\r\n                                $model: ctrl.parserResult.modelMapper($scope, locals)\r\n                            });\r\n                        });\r\n\r\n                        if (ctrl.closeOnSelect) {\r\n                            ctrl.close(skipFocusser);\r\n                        }\r\n                        if ($event && $event.type === 'click') {\r\n                            ctrl.clickTriggeredSelect = true;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Closes the dropdown\r\n            ctrl.close = function(skipFocusser) {\r\n                //console.log(\"close\")\r\n                if (!ctrl.open) return;\r\n                if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();\r\n                //_resetSearchInput();\r\n                ctrl.open = false;\r\n                $scope.$emit('uis:close', ctrl.search);\r\n                $scope.$broadcast('uis:close', skipFocusser);\r\n\r\n            };\r\n\r\n            ctrl.setFocus = function() {\r\n                //console.log(\"setFocus\")\r\n                if (!ctrl.focus) ctrl.focusInput[0].focus();\r\n            };\r\n\r\n            ctrl.clear = function($event) {\r\n\r\n                //console.log(\"clear\")\r\n                ctrl.select(undefined);\r\n                $event.stopPropagation();\r\n                ctrl.focusser[0].focus();\r\n            };\r\n\r\n            // Toggle dropdown\r\n            ctrl.toggle = function(e) {\r\n                //console.log(\"toggle\")\r\n                if (ctrl.open) {\r\n                    ctrl.close();\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                } else {\r\n                    ctrl.activate();\r\n                }\r\n            };\r\n\r\n            ctrl.isLocked = function(itemScope, itemIndex) {\r\n                //console.log(\"isLocked\")\r\n                var isLocked, item = ctrl.selected[itemIndex];\r\n\r\n                if (item && !angular.isUndefined(ctrl.lockChoiceExpression)) {\r\n                    isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression)); // force the boolean value\r\n                    item._uiSelectChoiceLocked = isLocked; // store this for later reference\r\n                }\r\n\r\n                return isLocked;\r\n            };\r\n\r\n            var sizeWatch = null;\r\n            ctrl.sizeSearchInput = function() {\r\n                //console.log(\"sizeSearchInput\")\r\n                var input = ctrl.searchInput[0],\r\n                    container = ctrl.searchInput.parent().parent()[0],\r\n                    calculateContainerWidth = function() {\r\n                        // Return the container width only if the search input is visible\r\n                        return container.clientWidth * !!input.offsetParent;\r\n                    },\r\n                    updateIfVisible = function(containerWidth) {\r\n                        if (containerWidth === 0) {\r\n                            return false;\r\n                        }\r\n                        var inputWidth = containerWidth - input.offsetLeft - 10;\r\n                        if (inputWidth < 50) inputWidth = containerWidth;\r\n                        ctrl.searchInput.css('width', inputWidth + 'px');\r\n                        return true;\r\n                    };\r\n\r\n                ctrl.searchInput.css('width', '10px');\r\n                $timeout(function() { //Give tags time to render correctly\r\n                    if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {\r\n                        sizeWatch = $scope.$watch(calculateContainerWidth, function(containerWidth) {\r\n                            if (updateIfVisible(containerWidth)) {\r\n                                sizeWatch();\r\n                                sizeWatch = null;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            function getCaret(el) {\r\n                if (el.selectionStart) {\r\n                    return el.selectionStart;\r\n                } else if (document.selection) {\r\n                    el.focus();\r\n\r\n                    var r = document.selection.createRange();\r\n                    if (r == null) {\r\n                        return 0;\r\n                    }\r\n\r\n                    var re = el.createTextRange(),\r\n                        rc = re.duplicate();\r\n                    re.moveToBookmark(r.getBookmark());\r\n                    rc.setEndPoint('EndToStart', re);\r\n\r\n                    return rc.text.length;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            function resetCursor(txtElement, currentPos) {\r\n                if (txtElement.setSelectionRange) {\r\n                    txtElement.focus();\r\n                    txtElement.setSelectionRange(currentPos, currentPos);\r\n                } else if (txtElement.createTextRange) {\r\n                    var range = txtElement.createTextRange();\r\n                    range.moveStart('character', currentPos);\r\n                    range.select();\r\n                }\r\n            }\r\n\r\n            function handleBackspace(ele) {\r\n                //var textarea = document.getElementById('txtArea');\r\n                var currentPos = getCaret(ele);\r\n                var text = ele.value;\r\n\r\n                var backSpace = text.substr(0, currentPos) + text.substr(ele.selectionEnd, text.length);\r\n\r\n                ele.value = backSpace;\r\n                text = ele.value;\r\n                resetCursor(ele, text.length);\r\n            }\r\n\r\n            function getSelectionText() {\r\n                var text = \"\";\r\n                if (window.getSelection) {\r\n                    text = window.getSelection().toString();\r\n                } else if (document.selection && document.selection.type != \"Control\") {\r\n                    text = document.selection.createRange().text;\r\n                }\r\n                return text;\r\n            }\r\n\r\n            function _handleDropDownSelection(key) {\r\n                var processed = true;\r\n                switch (key) {\r\n                    case KEY.DOWN:\r\n                        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode\r\n                        else if (ctrl.activeIndex < ctrl.items.length - 1) {\r\n                            ctrl.activeIndex++;\r\n                        }\r\n                        break;\r\n                    case KEY.UP:\r\n                        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode\r\n                        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) {\r\n                            ctrl.activeIndex--;\r\n                        }\r\n                        break;\r\n                    case KEY.TAB:\r\n                        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);\r\n                        break;\r\n\r\n                    case KEY.ENTER:\r\n                        if (ctrl.open && ctrl.activeIndex >= 0) {\r\n                            if (ctrl.items && ctrl.items.length > 0)\r\n                                ctrl.select(ctrl.items[ctrl.activeIndex]); // Make sure at least one dropdown item is highlighted before adding.\r\n                            else {\r\n                                if (ctrl.searchInput && ctrl.searchInput[0]) {\r\n                                    if (ctrl.searchInput[0].value !== ctrl.search) {\r\n                                        ctrl.search = ctrl.searchInput[0].value;\r\n                                    }\r\n                                }\r\n                                $scope.$emit('onEnter', ctrl.search);\r\n                            }\r\n                        } else {\r\n                            ctrl.activate(false, true); //In case its the search input in 'multiple' mode\r\n                        }\r\n                        break;\r\n                    case KEY.ESC:\r\n                        ctrl.close();\r\n                        break;\r\n                    default:\r\n                        processed = false;\r\n                }\r\n                return processed;\r\n            }\r\n\r\n            // Bind to keyboard shortcuts\r\n            ctrl.searchInput.on('keydown', function(e) {\r\n                //console.log(\"searchInput on\")\r\n                var key = e.which;\r\n\r\n                // if(~[KEY.ESC,KEY.TAB].indexOf(key)){\r\n                //   //TODO: SEGURO?\r\n                //   ctrl.close();\r\n                // }\r\n\r\n                $scope.$apply(function() {\r\n                    //console.log(\"apply\")\r\n                    var tagged = false;\r\n\r\n                    if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {\r\n                        _handleDropDownSelection(key);\r\n\r\n                        if (ctrl.taggingTokens.isActivated) {\r\n                            for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {\r\n                                if (ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode]) {\r\n                                    // make sure there is a new value to push via tagging\r\n                                    if (ctrl.search.length > 0) {\r\n                                        tagged = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (tagged) {\r\n                                $timeout(function() {\r\n                                    ctrl.searchInput.triggerHandler('tagged');\r\n                                    var newItem = ctrl.search.replace(KEY.MAP[e.keyCode], '').trim();\r\n                                    if (ctrl.tagging.fct) {\r\n                                        newItem = ctrl.tagging.fct(newItem);\r\n                                    }\r\n                                    if (newItem) ctrl.select(newItem, true);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n                if (KEY.isVerticalMovement(key) && ctrl.items.length > 0) {\r\n                    _ensureHighlightVisible();\r\n                }\r\n\r\n            });\r\n\r\n            // If tagging try to split by tokens and add items\r\n            ctrl.searchInput.on('paste', function(e) {\r\n                //console.log(\"paste\")\r\n                var data = e.originalEvent.clipboardData.getData('text/plain');\r\n                if (data && data.length > 0 && ctrl.taggingTokens.isActivated && ctrl.tagging.fct) {\r\n                    var items = data.split(ctrl.taggingTokens.tokens[0]); // split by first token only\r\n                    if (items && items.length > 0) {\r\n                        angular.forEach(items, function(item) {\r\n                            var newItem = ctrl.tagging.fct(item);\r\n                            if (newItem) {\r\n                                ctrl.select(newItem, true);\r\n                            }\r\n                        });\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            ctrl.searchInput.on('tagged', function() {\r\n                //console.log(\"searchInput.on\")\r\n                $timeout(function() {\r\n                    _resetSearchInput();\r\n                });\r\n            });\r\n\r\n            // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431\r\n            function _ensureHighlightVisible() {\r\n                //console.log(\"_ensureHighlightVisible\")\r\n                var container = $element.querySelectorAll('.ui-select-choices-content');\r\n                var choices = container.querySelectorAll('.ui-select-choices-row');\r\n                if (choices.length < 1) {\r\n                    throw uiSelectMinErr('choices', \"Expected multiple .ui-select-choices-row but got '{0}'.\", choices.length);\r\n                }\r\n\r\n                if (ctrl.activeIndex < 0) {\r\n                    return;\r\n                }\r\n\r\n                var highlighted = choices[ctrl.activeIndex];\r\n                var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;\r\n                var height = container[0].offsetHeight;\r\n\r\n                if (posY > height) {\r\n                    container[0].scrollTop += posY - height;\r\n                } else if (posY < highlighted.clientHeight) {\r\n                    if (ctrl.isGrouped && ctrl.activeIndex === 0)\r\n                        container[0].scrollTop = 0; //To make group header visible when going all the way up\r\n                    else\r\n                        container[0].scrollTop -= highlighted.clientHeight - posY;\r\n                }\r\n            }\r\n\r\n            $scope.$on('$destroy', function() {\r\n                //console.log(\"destroyn\")\r\n                ctrl.searchInput.off('keyup keydown tagged blur paste');\r\n            });\r\n\r\n        }\r\n    ]);\r\n\r\n    uis.directive('uiSelect', ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',\r\n        function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                templateUrl: function(tElement, tAttrs) {\r\n                    var theme = tAttrs.theme || uiSelectConfig.theme;\r\n                    return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');\r\n                },\r\n                replace: true,\r\n                transclude: true,\r\n                require: ['uiSelect', '^ngModel'],\r\n                scope: true,\r\n\r\n                controller: 'uiSelectCtrl',\r\n                controllerAs: '$select',\r\n                compile: function(tElement, tAttrs) {\r\n\r\n                    //Multiple or Single depending if multiple attribute presence\r\n                    if (angular.isDefined(tAttrs.multiple))\r\n                        tElement.append(\"<ui-select-multiple/>\").removeAttr('multiple');\r\n                    else\r\n                        tElement.append(\"<ui-select-single/>\");\r\n\r\n                    return function(scope, element, attrs, ctrls, transcludeFn) {\r\n\r\n                        var $select = ctrls[0];\r\n                        var ngModel = ctrls[1];\r\n\r\n                        $select.generatedId = uiSelectConfig.generateId();\r\n                        $select.baseTitle = attrs.title || 'Select box';\r\n                        $select.focusserTitle = $select.baseTitle + ' focus';\r\n                        $select.focusserId = 'focusser-' + $select.generatedId;\r\n                        $select.open = false;\r\n\r\n                        $select.closeOnSelect = function() {\r\n                            //console.log(\"closeOnSelect\")\r\n                            if (angular.isDefined(attrs.closeOnSelect)) {\r\n                                return $parse(attrs.closeOnSelect)();\r\n                            } else {\r\n                                return uiSelectConfig.closeOnSelect;\r\n                            }\r\n                        }();\r\n\r\n                        $select.onSelectCallback = $parse(attrs.onSelect);\r\n                        $select.onRemoveCallback = $parse(attrs.onRemove);\r\n\r\n                        //Set reference to ngModel from uiSelectCtrl\r\n                        $select.ngModel = ngModel;\r\n\r\n                        $select.choiceGrouped = function(group) {\r\n                            //console.log(\"choiceGrouped\")\r\n                            return $select.isGrouped && group && group.name;\r\n                        };\r\n\r\n                        element.on('blur', function() {\r\n                            //console.log(\"here\");\r\n                        });\r\n\r\n                        if (attrs.tabindex) {\r\n                            attrs.$observe('tabindex', function(value) {\r\n                                $select.focusInput.attr(\"tabindex\", value);\r\n                                element.removeAttr(\"tabindex\");\r\n                            });\r\n                        }\r\n\r\n                        scope.$watch('searchEnabled', function() {\r\n                            //console.log(\"searchEnabled\")\r\n                            var searchEnabled = scope.$eval(attrs.searchEnabled);\r\n                            $select.searchEnabled = searchEnabled !== undefined ? searchEnabled : uiSelectConfig.searchEnabled;\r\n                        });\r\n\r\n                        scope.$watch('sortable', function() {\r\n                            //console.log(\"sortable\")\r\n                            var sortable = scope.$eval(attrs.sortable);\r\n                            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;\r\n                        });\r\n\r\n                        attrs.$observe('disabled', function() {\r\n                            //console.log(\"disabled\")\r\n                            // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string\r\n                            $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;\r\n                        });\r\n\r\n                        attrs.$observe('resetSearchInput', function() {\r\n                            //console.log(\"resetSearchInput\")\r\n                            // $eval() is needed otherwise we get a string instead of a boolean\r\n                            var resetSearchInput = scope.$eval(attrs.resetSearchInput);\r\n                            $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;\r\n                        });\r\n\r\n                        attrs.$observe('tagging', function() {\r\n                            //console.log(\"tagging\")\r\n                            if (attrs.tagging !== undefined) {\r\n                                // $eval() is needed otherwise we get a string instead of a boolean\r\n                                var taggingEval = scope.$eval(attrs.tagging);\r\n                                $select.tagging = {\r\n                                    isActivated: true,\r\n                                    fct: taggingEval !== true ? taggingEval : undefined\r\n                                };\r\n                            } else {\r\n                                $select.tagging = {\r\n                                    isActivated: false,\r\n                                    fct: undefined\r\n                                };\r\n                            }\r\n                        });\r\n\r\n                        attrs.$observe('taggingLabel', function() {\r\n                            //console.log(\"taggingLabel\")\r\n                            if (attrs.tagging !== undefined) {\r\n                                // check eval for FALSE, in this case, we disable the labels\r\n                                // associated with tagging\r\n                                if (attrs.taggingLabel === 'false') {\r\n                                    $select.taggingLabel = false;\r\n                                } else {\r\n                                    $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        attrs.$observe('taggingTokens', function() {\r\n                            if (attrs.tagging !== undefined) {\r\n                                var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',', 'ENTER'];\r\n                                $select.taggingTokens = {\r\n                                    isActivated: true,\r\n                                    tokens: tokens\r\n                                };\r\n                            }\r\n                        });\r\n\r\n                        //Automatically gets focus when loaded\r\n                        if (angular.isDefined(attrs.autofocus)) {\r\n                            $timeout(function() {\r\n                                $select.setFocus();\r\n                            });\r\n                        }\r\n\r\n                        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')\r\n                        if (angular.isDefined(attrs.focusOn)) {\r\n                            scope.$on(attrs.focusOn, function() {\r\n                                $timeout(function() {\r\n                                    $select.setFocus();\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        function onDocumentClick(e) {\r\n\r\n                            if (!$select.open) {\r\n                                console.log(\"onDocumentClick\")\r\n                                return; //Skip it if dropdown is close\r\n                            }\r\n                            //Skip it if dropdown is close\r\n\r\n                            var contains = false;\r\n\r\n                            if (window.jQuery) {\r\n                                // Firefox 3.6 does not support element.contains()\r\n                                // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\r\n                                contains = window.jQuery.contains(element[0], e.target);\r\n                            } else {\r\n                                contains = element[0].contains(e.target);\r\n                            }\r\n\r\n                            if (!contains && !$select.clickTriggeredSelect) {\r\n                                //Will lose focus only with certain targets\r\n                                var focusableControls = ['input', 'button', 'textarea'];\r\n                                var targetScope = angular.element(e.target).scope(); //To check if target is other ui-select\r\n                                var skipFocusser = targetScope && targetScope.$select && targetScope.$select !== $select; //To check if target is other ui-select\r\n                                if (!skipFocusser) skipFocusser = ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea\r\n                                $select.close(skipFocusser);\r\n                                scope.$digest();\r\n                            }\r\n                            $select.clickTriggeredSelect = false;\r\n                        }\r\n\r\n                        // See Click everywhere but here event http://stackoverflow.com/questions/12931369\r\n                        $document.on('click', onDocumentClick);\r\n\r\n                        scope.$on(\"focusLost\", function() {\r\n                            //console.log(\"focus lost\");\r\n                        })\r\n\r\n                        scope.$on('$destroy', function() {\r\n                            $document.off('click', onDocumentClick);\r\n                        });\r\n\r\n                        // Move transcluded elements to their correct position in main template\r\n                        transcludeFn(scope, function(clone) {\r\n                            // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html\r\n\r\n                            // One day jqLite will be replaced by jQuery and we will be able to write:\r\n                            // var transcludedElement = clone.filter('.my-class')\r\n                            // instead of creating a hackish DOM element:\r\n                            var transcluded = angular.element('<div>').append(clone);\r\n\r\n                            var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');\r\n                            transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr\r\n                            transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes\r\n                            if (transcludedMatch.length !== 1) {\r\n                                throw uiSelectMinErr('transcluded', \"Expected 1 .ui-select-match but got '{0}'.\", transcludedMatch.length);\r\n                            }\r\n                            element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);\r\n\r\n                            var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');\r\n                            transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr\r\n                            transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes\r\n                            if (transcludedChoices.length !== 1) {\r\n                                throw uiSelectMinErr('transcluded', \"Expected 1 .ui-select-choices but got '{0}'.\", transcludedChoices.length);\r\n                            }\r\n                            element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);\r\n                        });\r\n\r\n                        // Support for appending the select field to the body when its open\r\n                        var appendToBody = scope.$eval(attrs.appendToBody);\r\n                        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {\r\n                            scope.$watch('$select.open', function(isOpen) {\r\n                                if (isOpen) {\r\n                                    positionDropdown();\r\n                                } else {\r\n                                    resetDropdown();\r\n                                }\r\n                            });\r\n\r\n                            // Move the dropdown back to its original location when the scope is destroyed. Otherwise\r\n                            // it might stick around when the user routes away or the select field is otherwise removed\r\n                            scope.$on('$destroy', function() {\r\n                                resetDropdown();\r\n                            });\r\n                        }\r\n\r\n                        // Hold on to a reference to the .ui-select-container element for appendToBody support\r\n                        var placeholder = null,\r\n                            originalWidth = '';\r\n\r\n                        function positionDropdown() {\r\n                            // Remember the absolute position of the element\r\n                            var offset = uisOffset(element);\r\n\r\n                            // Clone the element into a placeholder element to take its original place in the DOM\r\n                            placeholder = angular.element('<div class=\"ui-select-placeholder\"></div>');\r\n                            placeholder[0].style.width = offset.width + 'px';\r\n                            placeholder[0].style.height = offset.height + 'px';\r\n                            element.after(placeholder);\r\n\r\n                            // Remember the original value of the element width inline style, so it can be restored\r\n                            // when the dropdown is closed\r\n                            originalWidth = element[0].style.width;\r\n\r\n                            // Now move the actual dropdown element to the end of the body\r\n                            $document.find('body').append(element);\r\n\r\n                            element[0].style.position = 'absolute';\r\n                            element[0].style.left = offset.left + 'px';\r\n                            element[0].style.top = offset.top + 'px';\r\n                            element[0].style.width = offset.width + 'px';\r\n                        }\r\n\r\n                        function resetDropdown() {\r\n                            //console.log(\"resetDropdown\")\r\n                            if (placeholder === null) {\r\n                                // The dropdown has not actually been display yet, so there's nothing to reset\r\n                                return;\r\n                            }\r\n\r\n                            // Move the dropdown element back to its original location in the DOM\r\n                            placeholder.replaceWith(element);\r\n                            placeholder = null;\r\n\r\n                            element[0].style.position = '';\r\n                            element[0].style.left = '';\r\n                            element[0].style.top = '';\r\n                            element[0].style.width = originalWidth;\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        }\r\n    ]);\r\n\r\n    uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: '^uiSelect',\r\n            replace: true,\r\n            transclude: true,\r\n            templateUrl: function(tElement) {\r\n                // Gets theme attribute from parent (ui-select)\r\n                var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;\r\n                var multi = tElement.parent().attr('multiple');\r\n                return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');\r\n            },\r\n            link: function(scope, element, attrs, $select) {\r\n                $select.lockChoiceExpression = attrs.uiLockChoice;\r\n                attrs.$observe('placeholder', function(placeholder) {\r\n                    $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;\r\n                });\r\n\r\n                function setAllowClear(allow) {\r\n                    $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;\r\n                }\r\n\r\n                attrs.$observe('allowClear', setAllowClear);\r\n                setAllowClear(attrs.allowClear);\r\n\r\n                if ($select.multiple) {\r\n                    $select.sizeSearchInput();\r\n                }\r\n\r\n            }\r\n        };\r\n    }]);\r\n\r\n    uis.directive('uiSelectMultiple', ['uiSelectMinErr', '$timeout', function(uiSelectMinErr, $timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: ['^uiSelect', '^ngModel'],\r\n\r\n            controller: ['$scope', '$timeout', function($scope, $timeout) {\r\n\r\n                var ctrl = this,\r\n                    $select = $scope.$select,\r\n                    ngModel;\r\n\r\n                //Wait for link fn to inject it \r\n                $scope.$evalAsync(function() {\r\n                    ngModel = $scope.ngModel;\r\n                });\r\n\r\n                ctrl.activeMatchIndex = -1;\r\n\r\n                ctrl.updateModel = function() {\r\n                    //console.log(\"updateModel\")\r\n                    ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes\r\n                    ctrl.refreshComponent();\r\n                };\r\n\r\n                ctrl.refreshComponent = function() {\r\n                    //console.log(\"refreshComponent\")\r\n                    //Remove already selected items\r\n                    //e.g. When user clicks on a selection, the selected array changes and \r\n                    //the dropdown should remove that item\r\n                    $select.refreshItems();\r\n                    $select.sizeSearchInput();\r\n                };\r\n\r\n                // Remove item from multiple select\r\n                ctrl.removeChoice = function(index) {\r\n                    //console.log(\"removeChoice\")\r\n                    var removedChoice = $select.selected[index];\r\n\r\n                    // if the choice is locked, can't remove it\r\n                    if (removedChoice && removedChoice._uiSelectChoiceLocked) return;\r\n\r\n                    var locals = {};\r\n                    locals[$select.parserResult.itemName] = removedChoice;\r\n\r\n                    $select.selected.splice(index, 1);\r\n                    ctrl.activeMatchIndex = -1;\r\n                    $select.sizeSearchInput();\r\n\r\n                    // Give some time for scope propagation.\r\n                    $timeout(function() {\r\n                        $select.onRemoveCallback($scope, {\r\n                            $item: removedChoice,\r\n                            $model: $select.parserResult.modelMapper($scope, locals)\r\n                        });\r\n                    });\r\n\r\n                    ctrl.updateModel();\r\n\r\n                };\r\n\r\n                ctrl.getPlaceholder = function() {\r\n                    //console.log(\"getPlaceholder\")\r\n                    //Refactor single?\r\n                    if ($select.selected.length) return;\r\n                    return $select.placeholder;\r\n                };\r\n\r\n\r\n            }],\r\n            controllerAs: '$selectMultiple',\r\n\r\n            link: function(scope, element, attrs, ctrls) {\r\n\r\n                var $select = ctrls[0];\r\n                var ngModel = scope.ngModel = ctrls[1];\r\n                var $selectMultiple = scope.$selectMultiple;\r\n\r\n                //$select.selected = raw selected objects (ignoring any property binding)\r\n\r\n                $select.multiple = true;\r\n                $select.removeSelected = false;\r\n\r\n                //Input that will handle focus\r\n                $select.focusInput = $select.searchInput;\r\n\r\n                //From view --> model\r\n                ngModel.$parsers.unshift(function() {\r\n\r\n                    //console.log(\"parsers\")\r\n                    var locals = {},\r\n                        result,\r\n                        resultMultiple = [];\r\n                    for (var j = $select.selected.length - 1; j >= 0; j--) {\r\n                        locals = {};\r\n                        locals[$select.parserResult.itemName] = $select.selected[j];\r\n                        result = $select.parserResult.modelMapper(scope, locals);\r\n                        resultMultiple.unshift(result);\r\n                    }\r\n                    return resultMultiple;\r\n                });\r\n\r\n                // From model --> view\r\n                ngModel.$formatters.unshift(function(inputValue) {\r\n                    //console.log(\"formatters\")\r\n                    var data = $select.parserResult.source(scope, {\r\n                            $select: {\r\n                                search: ''\r\n                            }\r\n                        }), //Overwrite $search\r\n                        locals = {},\r\n                        result;\r\n                    if (!data) return inputValue;\r\n                    var resultMultiple = [];\r\n                    var checkFnMultiple = function(list, value) {\r\n                        if (!list || !list.length) return;\r\n                        for (var p = list.length - 1; p >= 0; p--) {\r\n                            locals[$select.parserResult.itemName] = list[p];\r\n                            result = $select.parserResult.modelMapper(scope, locals);\r\n                            if ($select.parserResult.trackByExp) {\r\n                                var matches = /\\.(.+)/.exec($select.parserResult.trackByExp);\r\n                                if (matches.length > 0 && result[matches[1]] == value[matches[1]]) {\r\n                                    resultMultiple.unshift(list[p]);\r\n                                    return true;\r\n                                }\r\n                            }\r\n                            if (angular.equals(result, value)) {\r\n                                resultMultiple.unshift(list[p]);\r\n                                return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    };\r\n                    if (!inputValue) return resultMultiple; //If ngModel was undefined\r\n                    for (var k = inputValue.length - 1; k >= 0; k--) {\r\n                        //Check model array of currently selected items \r\n                        if (!checkFnMultiple($select.selected, inputValue[k])) {\r\n                            //Check model array of all items available\r\n                            if (!checkFnMultiple(data, inputValue[k])) {\r\n                                //If not found on previous lists, just add it directly to resultMultiple\r\n                                resultMultiple.unshift(inputValue[k]);\r\n                            }\r\n                        }\r\n                    }\r\n                    return resultMultiple;\r\n                });\r\n\r\n                //Watch for external model changes \r\n                scope.$watchCollection(function() {\r\n                    return ngModel.$modelValue;\r\n                }, function(newValue, oldValue) {\r\n                    if (oldValue != newValue) {\r\n                        ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters\r\n                        $selectMultiple.refreshComponent();\r\n                    }\r\n                });\r\n\r\n                ngModel.$render = function() {\r\n                    //console.log(\"render\")\r\n                    // Make sure that model value is array\r\n                    if (!angular.isArray(ngModel.$viewValue)) {\r\n                        // Have tolerance for null or undefined values\r\n                        if (angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null) {\r\n                            $select.selected = [];\r\n                        } else {\r\n                            throw uiSelectMinErr('multiarr', \"Expected model value to be array but got '{0}'\", ngModel.$viewValue);\r\n                        }\r\n                    }\r\n                    $select.selected = ngModel.$viewValue;\r\n                    scope.$evalAsync(); //To force $digest\r\n                };\r\n\r\n                scope.$on('uis:select', function(event, item) {\r\n                    //console.log(\"uis:select\")\r\n                    $select.selected.push(item);\r\n                    $selectMultiple.updateModel();\r\n                });\r\n\r\n                scope.$on('uis:activate', function() {\r\n                    console.log(\"uis:activate\")\r\n                    if ($select && $select.searchInput && $select.searchInput[0]) {\r\n                        $select.search = $select.searchInput[0].value;\r\n                    }\r\n                    $selectMultiple.activeMatchIndex = -1;\r\n                });\r\n\r\n                scope.$watch('$select.disabled', function(newValue, oldValue) {\r\n                    //console.log(\"uis:disabled\")\r\n                    // As the search input field may now become visible, it may be necessary to recompute its size\r\n                    if (oldValue && !newValue) $select.sizeSearchInput();\r\n                });\r\n\r\n\r\n\r\n\r\n                $select.searchInput.on('keydown', function(e) {\r\n                    var key = e.which;\r\n                    scope.$apply(function() {\r\n                        var processed = false;\r\n                        // var tagged = false; //Checkme\r\n                        if (KEY.isHorizontalMovement(key)) {\r\n                            processed = _handleMatchSelection(key);\r\n                        }\r\n                        if (processed && key != KEY.TAB) {\r\n                            //TODO Check si el tab selecciona aun correctamente\r\n                            //Crear test\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function _getCaretPosition(el) {\r\n                        //console.log(\"_getCaretPosition\")\r\n                        if (angular.isNumber(el.selectionStart)) return el.selectionStart;\r\n                        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise\r\n                        else return el.value.length;\r\n                    }\r\n                    // Handles selected options in \"multiple\" mode\r\n                function _handleMatchSelection(key) {\r\n                    var caretPosition = _getCaretPosition($select.searchInput[0]),\r\n                        length = $select.selected.length,\r\n                        // none  = -1,\r\n                        first = 0,\r\n                        last = length - 1,\r\n                        curr = $selectMultiple.activeMatchIndex,\r\n                        next = $selectMultiple.activeMatchIndex + 1,\r\n                        prev = $selectMultiple.activeMatchIndex - 1,\r\n                        newIndex = curr;\r\n\r\n                    if (caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;\r\n\r\n                    $select.close();\r\n\r\n                    function getNewActiveMatchIndex() {\r\n                        //console.log(\"getNewActiveMatchIndex\")\r\n                        switch (key) {\r\n                            case KEY.LEFT:\r\n                                // Select previous/first item\r\n                                if (~$selectMultiple.activeMatchIndex) return prev;\r\n                                // Select last item\r\n                                else return last;\r\n                                break;\r\n                            case KEY.RIGHT:\r\n                                // Open drop-down\r\n                                if (!~$selectMultiple.activeMatchIndex || curr === last) {\r\n                                    $select.activate();\r\n                                    return false;\r\n                                }\r\n                                // Select next/last item\r\n                                else return next;\r\n                                break;\r\n                                /*case KEY.BACKSPACE:\r\n                                  // Remove selected item and select previous/first\r\n                                  if(~$selectMultiple.activeMatchIndex){\r\n                                    $selectMultiple.removeChoice(curr);\r\n                                    return prev;\r\n                                  }\r\n                                  // Select last item\r\n                                  else return last;\r\n                                  break;*/\r\n                            case KEY.DELETE:\r\n                                // Remove selected item and select next item\r\n                                if (~$selectMultiple.activeMatchIndex) {\r\n                                    $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);\r\n                                    return curr;\r\n                                } else return false;\r\n                        }\r\n                    }\r\n\r\n                    newIndex = getNewActiveMatchIndex();\r\n\r\n                    if (!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;\r\n                    else $selectMultiple.activeMatchIndex = Math.min(last, Math.max(first, newIndex));\r\n\r\n                    return true;\r\n                }\r\n\r\n                $select.searchInput.on('keyup', function(e) {\r\n                    //console.log(\"searchInput.on\")\r\n                    if (!KEY.isVerticalMovement(e.which)) {\r\n                        scope.$evalAsync(function() {\r\n                            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;\r\n                        });\r\n                    }\r\n                    // Push a \"create new\" item into array if there is a search string\r\n                    if ($select.tagging.isActivated && $select.search.length > 0) {\r\n\r\n                        // return early with these keys\r\n                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which)) {\r\n                            return;\r\n                        }\r\n                        // always reset the activeIndex to the first item when tagging\r\n                        $select.activeIndex = $select.taggingLabel === false ? -1 : 0;\r\n                        // taggingLabel === false bypasses all of this\r\n                        if ($select.taggingLabel === false) return;\r\n\r\n                        var items = angular.copy($select.items);\r\n                        var stashArr = angular.copy($select.items);\r\n                        var newItem;\r\n                        var item;\r\n                        var hasTag = false;\r\n                        var dupeIndex = -1;\r\n                        var tagItems;\r\n                        var tagItem;\r\n\r\n                        // case for object tagging via transform `$select.tagging.fct` function\r\n                        if ($select.tagging.fct !== undefined) {\r\n                            tagItems = $select.$filter('filter')(items, {\r\n                                'isTag': true\r\n                            });\r\n                            if (tagItems.length > 0) {\r\n                                tagItem = tagItems[0];\r\n                            }\r\n                            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous\r\n                            if (items.length > 0 && tagItem) {\r\n                                hasTag = true;\r\n                                items = items.slice(1, items.length);\r\n                                stashArr = stashArr.slice(1, stashArr.length);\r\n                            }\r\n                            newItem = $select.tagging.fct($select.search);\r\n                            newItem.isTag = true;\r\n                            // verify the the tag doesn't match the value of an existing item\r\n                            if (stashArr.filter(function(origItem) {\r\n                                    return angular.equals(origItem, $select.tagging.fct($select.search));\r\n                                }).length > 0) {\r\n                                return;\r\n                            }\r\n                            newItem.isTag = true;\r\n                            // handle newItem string and stripping dupes in tagging string context\r\n                        } else {\r\n                            // find any tagging items already in the $select.items array and store them\r\n                            tagItems = $select.$filter('filter')(items, function(item) {\r\n                                if (item) {\r\n                                    if (typeof(item) === \"string\")\r\n                                        return item.match($select.taggingLabel);\r\n                                    else if (typeof(item) === \"object\") {\r\n                                        item.text.match($select.taggingLabel)\r\n                                    }\r\n                                }\r\n                            });\r\n                            if (tagItems.length > 0) {\r\n                                tagItem = tagItems[0];\r\n                            }\r\n                            if (items && items[0] !== \"\")\r\n                                item = items[0];\r\n                            else\r\n                                item = undefined;\r\n                            // remove existing tag item if found (should only ever be one tag item)\r\n                            if (item !== undefined && items.length > 0 && tagItem) {\r\n                                hasTag = true;\r\n                                items = items.slice(1, items.length);\r\n                                stashArr = stashArr.slice(1, stashArr.length);\r\n                            }\r\n                            newItem = $select.search + ' ' + $select.taggingLabel;\r\n                            if (_findApproxDupe($select.selected, $select.search) > -1) {\r\n                                return;\r\n                            }\r\n                            // verify the the tag doesn't match the value of an existing item from\r\n                            // the searched data set or the items already selected\r\n                            if (_findCaseInsensitiveDupe(stashArr.concat($select.selected))) {\r\n                                // if there is a tag from prev iteration, strip it / queue the change\r\n                                // and return early\r\n                                if (hasTag) {\r\n                                    items = stashArr;\r\n                                    scope.$evalAsync(function() {\r\n                                        $select.activeIndex = 0;\r\n                                        $select.items = items;\r\n                                    });\r\n                                }\r\n                                return;\r\n                            }\r\n                            if (_findCaseInsensitiveDupe(stashArr)) {\r\n                                // if there is a tag from prev iteration, strip it\r\n                                if (hasTag) {\r\n                                    $select.items = stashArr.slice(1, stashArr.length);\r\n                                }\r\n                                return;\r\n                            }\r\n                        }\r\n                        if (hasTag) dupeIndex = _findApproxDupe($select.selected, newItem);\r\n                        // dupe found, shave the first item\r\n                        if (dupeIndex > -1) {\r\n                            items = items.slice(dupeIndex + 1, items.length - 1);\r\n                        } else {\r\n                            items = [];\r\n                            // items.push(newItem);\r\n                            items = items.concat(stashArr);\r\n                        }\r\n                        scope.$evalAsync(function() {\r\n                            $select.activeIndex = 0;\r\n                            $select.items = items;\r\n                        });\r\n                    }\r\n                });\r\n\r\n                function _findCaseInsensitiveDupe(arr) {\r\n                    return false;\r\n                    if (arr === undefined || $select.search === undefined) {\r\n                        return false;\r\n                    }\r\n                    var hasDupe = arr.filter(function(origItem) {\r\n                        if ($select.search.toUpperCase() === undefined || origItem === undefined) {\r\n                            return false;\r\n                        }\r\n                        return origItem.toUpperCase() === $select.search.toUpperCase();\r\n                    }).length > 0;\r\n\r\n                    return hasDupe;\r\n                }\r\n\r\n                function _findApproxDupe(haystack, needle) {\r\n                    var dupeIndex = -1;\r\n                    if (angular.isArray(haystack)) {\r\n                        var tempArr = angular.copy(haystack);\r\n                        for (var i = 0; i < tempArr.length; i++) {\r\n                            // handle the simple string version of tagging\r\n                            if ($select.tagging.fct === undefined) {\r\n                                // search the array for the match\r\n                                if (tempArr[i] + ' ' + $select.taggingLabel === needle) {\r\n                                    dupeIndex = i;\r\n                                }\r\n                                // handle the object tagging implementation\r\n                            } else {\r\n                                var mockObj = tempArr[i];\r\n                                mockObj.isTag = true;\r\n                                if (angular.equals(mockObj, needle)) {\r\n                                    dupeIndex = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return dupeIndex;\r\n                }\r\n\r\n                $select.searchInput.on('blur', function() {\r\n                    $timeout(function() {\r\n                        $selectMultiple.activeMatchIndex = -1;\r\n                        if (!$select.open) {\r\n                            if ($select.searchInput && $select.searchInput[0]) {\r\n                                if ($select.searchInput[0].value !== $select.search)\r\n                                    $select.search = $select.searchInput[0].value;\r\n                                scope.$emit('focuslost', $select.search);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n\r\n            }\r\n        };\r\n    }]);\r\n    uis.directive('uiSelectSingle', ['$timeout', '$compile', function($timeout, $compile) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: ['^uiSelect', '^ngModel'],\r\n            link: function(scope, element, attrs, ctrls) {\r\n\r\n                var $select = ctrls[0];\r\n                var ngModel = ctrls[1];\r\n\r\n                element.on('blur', function() {\r\n                    //console.log(\"Blur\");\r\n                });\r\n\r\n                //From view --> model\r\n                ngModel.$parsers.unshift(function(inputValue) {\r\n                    var locals = {},\r\n                        result;\r\n                    locals[$select.parserResult.itemName] = inputValue;\r\n                    result = $select.parserResult.modelMapper(scope, locals);\r\n                    return result;\r\n                });\r\n\r\n                //From model --> view\r\n                ngModel.$formatters.unshift(function(inputValue) {\r\n                    var data = $select.parserResult.source(scope, {\r\n                            $select: {\r\n                                search: ''\r\n                            }\r\n                        }), //Overwrite $search\r\n                        locals = {},\r\n                        result;\r\n                    if (data) {\r\n                        var checkFnSingle = function(d) {\r\n                            locals[$select.parserResult.itemName] = d;\r\n                            result = $select.parserResult.modelMapper(scope, locals);\r\n                            return result == inputValue;\r\n                        };\r\n                        //If possible pass same object stored in $select.selected\r\n                        if ($select.selected && checkFnSingle($select.selected)) {\r\n                            return $select.selected;\r\n                        }\r\n                        for (var i = data.length - 1; i >= 0; i--) {\r\n                            if (checkFnSingle(data[i])) return data[i];\r\n                        }\r\n                    }\r\n                    return inputValue;\r\n                });\r\n\r\n                //Update viewValue if model change\r\n                scope.$watch('$select.selected', function(newValue) {\r\n                    if (ngModel.$viewValue !== newValue) {\r\n                        ngModel.$setViewValue(newValue);\r\n                    }\r\n                });\r\n\r\n                ngModel.$render = function() {\r\n                    $select.selected = ngModel.$viewValue;\r\n                };\r\n\r\n                scope.$on('uis:select', function(event, item) {\r\n                    $select.selected = item;\r\n                });\r\n\r\n                scope.$on('uis:close', function(event, skipFocusser) {\r\n                    $timeout(function() {\r\n                        $select.focusser.prop('disabled', false);\r\n                        if (!skipFocusser) $select.focusser[0].focus();\r\n                    }, 0, false);\r\n                });\r\n\r\n                scope.$on('uis:activate', function() {\r\n                    focusser.prop('disabled', true); //Will reactivate it on .close()\r\n                });\r\n\r\n                //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954\r\n                var focusser = angular.element(\"<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />\");\r\n                $compile(focusser)(scope);\r\n                $select.focusser = focusser;\r\n\r\n                //Input that will handle focus\r\n                $select.focusInput = focusser;\r\n\r\n                element.parent().append(focusser);\r\n                focusser.bind(\"focus\", function() {\r\n                    scope.$evalAsync(function() {\r\n                        $select.focus = true;\r\n                    });\r\n                });\r\n                focusser.bind(\"blur\", function() {\r\n                    scope.$evalAsync(function() {\r\n                        $select.focus = false;\r\n                    });\r\n                });\r\n                focusser.bind(\"keydown\", function(e) {\r\n\r\n                    if (e.which === KEY.BACKSPACE) {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        $select.select(undefined);\r\n                        scope.$apply();\r\n                        return;\r\n                    }\r\n\r\n                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {\r\n                        return;\r\n                    }\r\n\r\n                    if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE) {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        $select.activate();\r\n                    }\r\n\r\n                    scope.$digest();\r\n                });\r\n\r\n                focusser.bind(\"keyup input\", function(e) {\r\n\r\n                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {\r\n                        return;\r\n                    }\r\n\r\n                    $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input\r\n                    focusser.val('');\r\n                    scope.$digest();\r\n\r\n                });\r\n\r\n\r\n            }\r\n        };\r\n    }]);\r\n    // Make multiple matches sortable\r\n    uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {\r\n        return {\r\n            require: '^uiSelect',\r\n            link: function(scope, element, attrs, $select) {\r\n                if (scope[attrs.uiSelectSort] === null) {\r\n                    throw uiSelectMinErr('sort', \"Expected a list to sort\");\r\n                }\r\n\r\n\r\n                var options = angular.extend({\r\n                        axis: 'horizontal'\r\n                    },\r\n                    scope.$eval(attrs.uiSelectSortOptions));\r\n\r\n                var axis = options.axis,\r\n                    draggingClassName = 'dragging',\r\n                    droppingClassName = 'dropping',\r\n                    droppingBeforeClassName = 'dropping-before',\r\n                    droppingAfterClassName = 'dropping-after';\r\n\r\n                scope.$watch(function() {\r\n                    return $select.sortable;\r\n                }, function(n) {\r\n                    if (n) {\r\n                        element.attr('draggable', true);\r\n                    } else {\r\n                        element.removeAttr('draggable');\r\n                    }\r\n                });\r\n\r\n                element.on('dragstart', function(e) {\r\n                    element.addClass(draggingClassName);\r\n\r\n                    (e.dataTransfer || e.originalEvent.dataTransfer).setData('text/plain', scope.$index);\r\n                });\r\n\r\n                element.on('dragend', function() {\r\n                    element.removeClass(draggingClassName);\r\n                });\r\n\r\n                var move = function(from, to) {\r\n                    /*jshint validthis: true */\r\n                    this.splice(to, 0, this.splice(from, 1)[0]);\r\n                };\r\n\r\n                var dragOverHandler = function(e) {\r\n                    e.preventDefault();\r\n\r\n                    var offset = axis === 'vertical' ? e.offsetY || e.layerY || (e.originalEvent ? e.originalEvent.offsetY : 0) : e.offsetX || e.layerX || (e.originalEvent ? e.originalEvent.offsetX : 0);\r\n\r\n                    if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {\r\n                        element.removeClass(droppingAfterClassName);\r\n                        element.addClass(droppingBeforeClassName);\r\n\r\n                    } else {\r\n                        element.removeClass(droppingBeforeClassName);\r\n                        element.addClass(droppingAfterClassName);\r\n                    }\r\n                };\r\n\r\n                var dropTimeout;\r\n\r\n                var dropHandler = function(e) {\r\n                    e.preventDefault();\r\n\r\n                    var droppedItemIndex = parseInt((e.dataTransfer || e.originalEvent.dataTransfer).getData('text/plain'), 10);\r\n\r\n                    // prevent event firing multiple times in firefox\r\n                    $timeout.cancel(dropTimeout);\r\n                    dropTimeout = $timeout(function() {\r\n                        _dropHandler(droppedItemIndex);\r\n                    }, 20);\r\n                };\r\n\r\n                var _dropHandler = function(droppedItemIndex) {\r\n                    var theList = scope.$eval(attrs.uiSelectSort),\r\n                        itemToMove = theList[droppedItemIndex],\r\n                        newIndex = null;\r\n\r\n                    if (element.hasClass(droppingBeforeClassName)) {\r\n                        if (droppedItemIndex < scope.$index) {\r\n                            newIndex = scope.$index - 1;\r\n                        } else {\r\n                            newIndex = scope.$index;\r\n                        }\r\n                    } else {\r\n                        if (droppedItemIndex < scope.$index) {\r\n                            newIndex = scope.$index;\r\n                        } else {\r\n                            newIndex = scope.$index + 1;\r\n                        }\r\n                    }\r\n\r\n                    move.apply(theList, [droppedItemIndex, newIndex]);\r\n\r\n                    scope.$apply(function() {\r\n                        scope.$emit('uiSelectSort:change', {\r\n                            array: theList,\r\n                            item: itemToMove,\r\n                            from: droppedItemIndex,\r\n                            to: newIndex\r\n                        });\r\n                    });\r\n\r\n                    element.removeClass(droppingClassName);\r\n                    element.removeClass(droppingBeforeClassName);\r\n                    element.removeClass(droppingAfterClassName);\r\n\r\n                    element.off('drop', dropHandler);\r\n                };\r\n\r\n                element.on('dragenter', function() {\r\n                    if (element.hasClass(draggingClassName)) {\r\n                        return;\r\n                    }\r\n\r\n                    element.addClass(droppingClassName);\r\n\r\n                    element.on('dragover', dragOverHandler);\r\n                    element.on('drop', dropHandler);\r\n                });\r\n\r\n                element.on('dragleave', function(e) {\r\n                    if (e.target != element) {\r\n                        return;\r\n                    }\r\n                    element.removeClass(droppingClassName);\r\n                    element.removeClass(droppingBeforeClassName);\r\n                    element.removeClass(droppingAfterClassName);\r\n\r\n                    element.off('dragover', dragOverHandler);\r\n                    element.off('drop', dropHandler);\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    /**\r\n     * Parses \"repeat\" attribute.\r\n     *\r\n     * Taken from AngularJS ngRepeat source code\r\n     * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211\r\n     *\r\n     * Original discussion about parsing \"repeat\" attribute instead of fully relying on ng-repeat:\r\n     * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697\r\n     */\r\n\r\n    uis.service('uisRepeatParser', ['uiSelectMinErr', '$parse', function(uiSelectMinErr, $parse) {\r\n        var self = this;\r\n\r\n        /**\r\n         * Example:\r\n         * expression = \"address in addresses | filter: {street: $select.search} track by $index\"\r\n         * itemName = \"address\",\r\n         * source = \"addresses | filter: {street: $select.search}\",\r\n         * trackByExp = \"$index\",\r\n         */\r\n        self.parse = function(expression) {\r\n\r\n            var match = expression.match(/^\\s*(?:([\\s\\S]+?)\\s+as\\s+)?([\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\r\n\r\n            if (!match) {\r\n                throw uiSelectMinErr('iexp', \"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.\",\r\n                    expression);\r\n            }\r\n\r\n            return {\r\n                itemName: match[2], // (lhs) Left-hand side,\r\n                source: $parse(match[3]),\r\n                trackByExp: match[4],\r\n                modelMapper: $parse(match[1] || match[2])\r\n            };\r\n\r\n        };\r\n\r\n        self.getGroupNgRepeatExpression = function() {\r\n            return '$group in $select.groups';\r\n        };\r\n\r\n        self.getNgRepeatExpression = function(itemName, source, trackByExp, grouped) {\r\n            var expression = itemName + ' in ' + (grouped ? '$group.items' : source);\r\n            if (trackByExp) {\r\n                expression += ' track by ' + trackByExp;\r\n            }\r\n            return expression;\r\n        };\r\n    }]);\r\n\r\n}());\r\nangular.module(\"ui.select\").run([\"$templateCache\", function($templateCache) {\r\n    $templateCache.put(\"bootstrap/choices.tpl.html\", \"<ul class=\\\"ui-select-choices ui-select-choices-content dropdown-menu\\\" role=\\\"listbox\\\" ng-show=\\\"$select.items.length > 0\\\"><li class=\\\"ui-select-choices-group\\\" id=\\\"ui-select-choices-{{ $select.generatedId }}\\\"><div class=\\\"divider\\\" ng-show=\\\"$select.isGrouped && $index > 0\\\"></div><div ng-show=\\\"$select.isGrouped\\\" class=\\\"ui-select-choices-group-label dropdown-header\\\" ng-bind=\\\"$group.name\\\"></div><div id=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\\\" role=\\\"option\\\"><a href=\\\"javascript:void(0)\\\" class=\\\"ui-select-choices-row-inner\\\"></a></div></li></ul>\");\r\n    $templateCache.put(\"bootstrap/match-multiple.tpl.html\", \"<span class=\\\"ui-select-match\\\"><span ng-repeat=\\\"$item in $select.selected track by $index\\\"><span class=\\\"ui-select-match-item btn btn-default btn-xs\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" ng-disabled=\\\"$select.disabled\\\" ng-click=\\\"$selectMultiple.activeMatchIndex = $index;\\\" ng-class=\\\"{\\'btn-primary\\':$selectMultiple.activeMatchIndex === $index, \\'select-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span class=\\\"close ui-select-match-close\\\" ng-hide=\\\"$select.disabled\\\" ng-click=\\\"$selectMultiple.removeChoice($index)\\\">&nbsp;&times;</span> <span uis-transclude-append=\\\"\\\"></span></span></span></span>\");\r\n    $templateCache.put(\"bootstrap/match.tpl.html\", \"<div class=\\\"ui-select-match\\\" ng-hide=\\\"$select.open\\\" ng-disabled=\\\"$select.disabled\\\" ng-class=\\\"{\\'btn-default-focus\\':$select.focus}\\\"><span tabindex=\\\"-1\\\" class=\\\"btn btn-default form-control ui-select-toggle\\\" aria-label=\\\"{{ $select.baseTitle }} activate\\\" ng-disabled=\\\"$select.disabled\\\" ng-click=\\\"$select.activate()\\\" style=\\\"outline: 0;\\\"><span ng-show=\\\"$select.isEmpty()\\\" class=\\\"ui-select-placeholder text-muted\\\">{{$select.placeholder}}</span> <span ng-hide=\\\"$select.isEmpty()\\\" class=\\\"ui-select-match-text pull-left\\\" ng-class=\\\"{\\'ui-select-allow-clear\\': $select.allowClear && !$select.isEmpty()}\\\" ng-transclude=\\\"\\\"></span> <i class=\\\"caret pull-right\\\" ng-click=\\\"$select.toggle($event)\\\"></i> <a ng-show=\\\"$select.allowClear && !$select.isEmpty()\\\" aria-label=\\\"{{ $select.baseTitle }} clear\\\" style=\\\"margin-right: 10px\\\" ng-click=\\\"$select.clear($event)\\\" class=\\\"btn btn-xs btn-link pull-right\\\"><i class=\\\"glyphicon glyphicon-remove\\\" aria-hidden=\\\"true\\\"></i></a></span></div>\");\r\n    $templateCache.put(\"bootstrap/select-multiple.tpl.html\", \"<div class=\\\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\\\" ng-class=\\\"{open: $select.open}\\\"><div><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" class=\\\"ui-select-search input-xs\\\" placeholder=\\\"{{$selectMultiple.getPlaceholder()}}\\\" ng-disabled=\\\"$select.disabled\\\" ng-hide=\\\"$select.disabled\\\" ng-click=\\\"$select.activate()\\\" ng-model=\\\"$select.search\\\" role=\\\"combobox\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" ondrop=\\\"return false;\\\"></div><div class=\\\"ui-select-choices\\\"></div></div>\");\r\n    $templateCache.put(\"bootstrap/select.tpl.html\", \"<div class=\\\"ui-select-container ui-select-bootstrap dropdown\\\" ng-class=\\\"{open: $select.open}\\\"><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" tabindex=\\\"-1\\\" aria-expanded=\\\"true\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"form-control ui-select-search\\\" placeholder=\\\"{{$select.placeholder}}\\\" ng-model=\\\"$select.search\\\" ng-show=\\\"$select.searchEnabled && $select.open\\\"><div class=\\\"ui-select-choices\\\"></div></div>\");\r\n    $templateCache.put(\"select2/choices.tpl.html\", \"<ul class=\\\"ui-select-choices ui-select-choices-content select2-results\\\"><li class=\\\"ui-select-choices-group\\\" ng-class=\\\"{\\'select2-result-with-children\\': $select.choiceGrouped($group) }\\\"><div ng-show=\\\"$select.choiceGrouped($group)\\\" class=\\\"ui-select-choices-group-label select2-result-label\\\" ng-bind=\\\"$group.name\\\"></div><ul role=\\\"listbox\\\" id=\\\"ui-select-choices-{{ $select.generatedId }}\\\" ng-class=\\\"{\\'select2-result-sub\\': $select.choiceGrouped($group), \\'select2-result-single\\': !$select.choiceGrouped($group) }\\\"><li role=\\\"option\\\" id=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{\\'select2-highlighted\\': $select.isActive(this), \\'select2-disabled\\': $select.isDisabled(this)}\\\"><div class=\\\"select2-result-label ui-select-choices-row-inner\\\"></div></li></ul></li></ul>\");\r\n    $templateCache.put(\"select2/match-multiple.tpl.html\", \"<span class=\\\"ui-select-match\\\"><li ng-repeat=\\\"$item in $select.selected track by $index\\\" ng-class=\\\"{\\'select2-search-choice-focus\\':$selectMultiple.activeMatchIndex === $index, \\'select2-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span uis-transclude-append=\\\"\\\"></span> </li></span>\");\r\n    //$templateCache.put(\"select2/match-multiple.tpl.html\",\"<span class=\\\"ui-select-match\\\"><li class=\\\"ui-select-match-item select2-search-choice\\\" ng-repeat=\\\"$item in $select.selected\\\" ng-class=\\\"{\\'select2-search-choice-focus\\':$selectMultiple.activeMatchIndex === $index, \\'select2-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span uis-transclude-append=\\\"\\\"></span> <a href=\\\"javascript:;\\\" class=\\\"ui-select-match-close select2-search-choice-close\\\" ng-click=\\\"$selectMultiple.removeChoice($index)\\\" tabindex=\\\"-1\\\"></a></li></span>\");\r\n    $templateCache.put(\"select2/match.tpl.html\", \"<a class=\\\"select2-choice ui-select-match\\\" ng-class=\\\"{\\'select2-default\\': $select.isEmpty()}\\\" ng-click=\\\"$select.toggle($event)\\\" aria-label=\\\"{{ $select.baseTitle }} select\\\"><span ng-show=\\\"$select.isEmpty()\\\" class=\\\"select2-chosen\\\">{{$select.placeholder}}</span> <span ng-hide=\\\"$select.isEmpty()\\\" class=\\\"select2-chosen\\\" ng-transclude=\\\"\\\"></span> <abbr ng-if=\\\"$select.allowClear && !$select.isEmpty()\\\" class=\\\"select2-search-choice-close\\\" ng-click=\\\"$select.clear($event)\\\"></abbr> <span class=\\\"select2-arrow ui-select-toggle\\\"><b></b></span></a>\");\r\n    $templateCache.put(\"select2/select-multiple.tpl.html\", \"<div class=\\\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\\\" ng-class=\\\"{\\'select2-container-active select2-dropdown-open open\\': $select.open, \\'select2-container-disabled\\': $select.disabled}\\\"><ul class=\\\"select2-choices\\\"><span class=\\\"ui-select-match\\\"></span><li class=\\\"select2-search-field\\\"><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" role=\\\"combobox\\\" aria-expanded=\\\"true\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"select2-input ui-select-search\\\" placeholder=\\\"{{$selectMultiple.getPlaceholder()}}\\\" ng-disabled=\\\"$select.disabled\\\" ng-hide=\\\"$select.disabled\\\" ng-model=\\\"$select.search\\\" ng-click=\\\"$select.activate()\\\" style=\\\"width: 34px;\\\" ondrop=\\\"return false;\\\"></li></ul><div class=\\\"select2-drop select2-with-searchbox select2-drop-active\\\" ng-class=\\\"{\\'select2-display-none\\': !$select.open}\\\"><div class=\\\"ui-select-choices\\\"></div></div></div>\");\r\n    $templateCache.put(\"select2/select.tpl.html\", \"<div class=\\\"ui-select-container select2 select2-container\\\" ng-class=\\\"{\\'select2-container-active select2-dropdown-open open\\': $select.open, \\'select2-container-disabled\\': $select.disabled, \\'select2-container-active\\': $select.focus, \\'select2-allowclear\\': $select.allowClear && !$select.isEmpty()}\\\"><div class=\\\"ui-select-match\\\"></div><div class=\\\"select2-drop select2-with-searchbox select2-drop-active\\\" ng-class=\\\"{\\'select2-display-none\\': !$select.open}\\\"><div class=\\\"select2-search\\\" ng-show=\\\"$select.searchEnabled\\\"><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" role=\\\"combobox\\\" aria-expanded=\\\"true\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"ui-select-search select2-input\\\" ng-model=\\\"$select.search\\\"></div><div class=\\\"ui-select-choices\\\"></div></div></div>\");\r\n    $templateCache.put(\"selectize/choices.tpl.html\", \"<div ng-show=\\\"$select.open\\\" class=\\\"ui-select-choices selectize-dropdown single\\\"><div class=\\\"ui-select-choices-content selectize-dropdown-content\\\"><div class=\\\"ui-select-choices-group optgroup\\\" role=\\\"listbox\\\"><div ng-show=\\\"$select.isGrouped\\\" class=\\\"ui-select-choices-group-label optgroup-header\\\" ng-bind=\\\"$group.name\\\"></div><div role=\\\"option\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\\\"><div class=\\\"option ui-select-choices-row-inner\\\" data-selectable=\\\"\\\"></div></div></div></div></div>\");\r\n    $templateCache.put(\"selectize/match.tpl.html\", \"<div ng-hide=\\\"($select.open || $select.isEmpty())\\\" class=\\\"ui-select-match\\\" ng-transclude=\\\"\\\"></div>\");\r\n    $templateCache.put(\"selectize/select.tpl.html\", \"<div class=\\\"ui-select-container selectize-control single\\\" ng-class=\\\"{\\'open\\': $select.open}\\\"><div class=\\\"selectize-input\\\" ng-class=\\\"{\\'focus\\': $select.open, \\'disabled\\': $select.disabled, \\'selectize-focus\\' : $select.focus}\\\" ng-click=\\\"$select.activate()\\\"><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" tabindex=\\\"-1\\\" class=\\\"ui-select-search ui-select-toggle\\\" ng-click=\\\"$select.toggle($event)\\\" placeholder=\\\"{{$select.placeholder}}\\\" ng-model=\\\"$select.search\\\" ng-hide=\\\"!$select.searchEnabled || ($select.selected && !$select.open)\\\" ng-disabled=\\\"$select.disabled\\\" aria-label=\\\"{{ $select.baseTitle }}\\\"></div><div class=\\\"ui-select-choices\\\"></div></div>\");\r\n}]);"],"sourceRoot":"/source/"}